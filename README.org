#+AUTHOR:  Ista Zahn
#+TITLE: Requirements for a sane emacs config for social scientists

* Quick start

** What is this?
This is a drop-in replacement for your .emacs.d. It automatically installs and configures several emacs packages useful for working with LaTeX documents, and for writing code for statistical analysis in R, Stata, SAS, and Julia. It also turns on several built-in features of emacs such as spell checking and syntax highlighting.

** How to I install it?
1) Make sure emacs >= version 24.3 is installed on your computer. See  [[#Suggested-external-programs][Suggested-external-programs]] for installation instructions.
2) Make sure you have [[http://git-scm.com/downloads][git]] installed on your computer. If you don't know what git is you might be interested in John McDonnell's [[http://nyuccl.org/pages/GitTutorial/][git tutorial]].
3) Determine your emacs configuration directory. Open emacs and type =C-x f ~/ RET=. This should open a directory listing buffer. Note the path at the top of this file. This is were your =.emacs.d= should go.
4) Back up your existing =~/.emacs= file and =~/.emacs.d= directory (e.g., rename =.emacs= to =OLD.emacs= and rename =.emacs.d= to =OLD.emacs.d=).
5) Clone one of the following versions into =~.emacs.d=:
   - master :: Relatively conservative, probably the one you want. \\ =git clone https://github.com/izahn/dotemacs.git -b master ~/.emacs.d=
   - Gary :: Like master but with large font by default. \\ =git clone https://github.com/izahn/dotemacs.git -b Gary ~/.emacs.d=
   - izahn :: Master plus more experimental packages at settings. Use
              at your own risk! \\ =git clone https://github.com/izahn/dotemacs.git -b Gary ~/.emacs.d=

For example, to use Gary's configuration open a terminal and run =git clone https://github.com/izahn/dotemacs.git -b Gary ~/.emacs.d=

** Suggested external programs
  :PROPERTIES:
  :CUSTOM_ID: Suggested-external-programs
  :END:

Some of the requirements listed in [[#Requirements][Requirements]] make use of software that must be installed outside of emacs. And of course you will need emacs itself! 

While it is theoretically possible to try to automate the installation of these external dependencies, it is probably easier and safer to simply provide documentation instructing users on how to install these prerequisites.

- Windows
  - Emacs :: http://vgoulet.act.ulaval.ca/en/emacs/
  - R :: http://cran.r-project.org/bin/windows/base/
  - LaTeX :: http://miktex.org/download
  - Pandoc :: https://github.com/jgm/pandoc/releases
  - GhostScript :: http://www.ghostscript.com/download/gsdnld.html

- OSX
  - Emacs :: http://vgoulet.act.ulaval.ca/en/emacs/
  - R :: http://cran.r-project.org/bin/macosx/
  - LaTeX :: http://tug.org/mactex/
  - Pandoc :: https://github.com/jgm/pandoc/releases
  - GhostScript :: http://pages.uoregon.edu/koch/

- Linux
  - Emacs :: Use your package manager, or see http://www.gnu.org/software/emacs/#Obtaining
  - R :: Use your package manager, or see http://cran.r-project.org/bin/linux/
  - LaTeX :: Use your package manager, or see https://www.tug.org/texlive/quickinstall.html
  - Pandoc :: Use your package manager, or see http://johnmacfarlane.net/pandoc/installing.html#all-platforms
  - GhostScript :: Use your package manager, or see http://www.ghostscript.com/download/gsdnld.html


* Discussion and implementation

** What the world needs now...
As of August 5th 2014 there are 2,960 github repositories named or mentioning '.emacs.d', and another 627 named or mentioning "dotemacs". Some of these are just personal emacs configurations, but many take pains to provide documentation and instruction for adopting them as your very own emacs configuration. And that's not to mention the [[https://github.com/search?q=emacs-starter-kit&type=Repositories&ref=searchresults][starter-kits]], [[https://github.com/search?q=emacs+prelude&type=Repositories&ref=searchresults][preludes]] and [[https://github.com/search?q=emacs+oh+my&type=Repositories&ref=searchresults][oh my emacs]] of the world! With all these options, does the world really need yet another emacs configuration? 

No, the world does not need another emacs starter kit. Indeed the guy who started the original emacs starter-kit has concluded that the whole idea is [[https://github.com/technomancy/emacs-starter-kit][unworkable]], and that if you want to use emacs you're better off configuring it yourself. I agree, and it's not that hard, even if you don't know emacs-lisp at all. You can copy code fragments from others' configuration on [[http://github.com][github]], from the [[http://emacswiki.org][emacs wiki]], or from [[http://stackoverflow.com][stackoverflow]] and build up your very own emacs configuration. And eventually it will be so perfect you will think "gee I could save people the trouble of configuring emacs, if they would just clone my configuration". So you will put it on github, like everyone else (including me). Sigh.


** Requirements
  :PROPERTIES:
  :CUSTOM_ID: Requirements
  :END:

Emacs is many things to many people, being perhaps the most configurable text editor ever created. However, there are some common tools that social scientists often make use of that are not accessible in emacs by default. It is therefore desirable to create a base configuration that enables the features that social scientists are likely to find useful. The table below lists some of these requirements, and describes how they can be made available in emacs.
 

| Requirement                 | Categories         | Requester  | Solution           | Notes                                                     |
|-----------------------------+--------------------+------------+--------------------+-----------------------------------------------------------|
| LaTeX editing/compilation   | Document prep      | Gary[fn:1] | AucTeX/RefTeX      | Installed and turned on                                   |
| Font locking                | Look-n-feel        | Gary       | font-lock-mode     | Built-in, turned on                                       |
| Spell checking              | Convenience        | Gary       | ispell/flyspell    | Built-in, turned on                                       |
| Outline/structure editing   | Convenience        | Gary       | outline-minor-mode | Built-in, turned on                                       |
| Revision control            | Version management | Gary       | VC-mode            | Built-in, turned on                                       |
| Edit/evaluate R/Stata/SAS   | Data analysis      | Ista       | ESS                | Installed and activated                                   |
| Easier file/buffer/access   | Convenience        | Ista       | helm               | Installed, turned on                                      |
| Reproducible research       | Data analysis      | Ista       | org-mode, polymode | Installed, polymode (Melpa) not working on RCE            |
| Copy/paste with other apps  | Convenience        | Ista       | x-select           | Built-in, turned on                                       |
| Word wrapping               | Look-n-feel        | Ista       | visual-line-mode   | Built-in, turned on                                       |
|                             |                    |            |                    |                                                           |

It will be hard to avoid the temptation for feature-creep; every emacs user has certain things they really like, but we don't want this to turn into a super-set of all the things that anyone likes. The table below list some things that would be nice to have but are controversial, trivial,  or not widely used.

| Requirement                        | Categories  | Requester | Solution               | Notes                                            |
|------------------------------------+-------------+-----------+------------------------+--------------------------------------------------|
| Command hinting/completion         | Convenience | Ista      | helm                   | Installed and turned on                          |
| Programming auto-completion        | Convenience | Ista      | Company                | Installed and turned on                          |
| Keep backup files out of the way   | Convenience | Ista      | backup-directory-alist | Built-in, turned on                              |
| Quieter startup                    | Look-n-feel | Ista      | inhibit-startup*       | Built-in, off by default                         |
| Cleaner interface                  | Look-n-feel | Ista      | tool-bar-mode          | Built-in, off by default                         |
| Highlight matched/mismatched paren | Convenience | Ista      | show-paren-mode        | Built-in, turned on                              |


** Implementation options
  :PROPERTIES:
  :CUSTOM_ID: Implementation-options
  :END:
Implementation of the requirements listed in the previous section can be approached from a few different starting places. 
1) We can start from the default emacs and add the required functionality.
2) We can start from a meta-package (probably http://kieranhealy.org/resources/emacs-starter-kit/ but other options exist) and (optionally) remove things we don't need.
3) We can start with specialized emacs distributions for different operating systems and add required functionality.

In my experience option 1 (building up from default Gnu emacs) works well on Linux, so-so on Mac, and is a real pain on Windows. Option 2 (the meta-package approach) tends to result in un-maintainable, complicated configurations that the user doesn't understand and can't configure. Therefore I suggest that we encourage people to start with OS-specific emacs distributions, and that we write relatively minimal config files that sets up the basics, along with documentation and comments explaining how to add related functionality. See [[#Cross-platform-issues][Cross platform issues]] for recommended emacs versions for Windows and OS X.

** Cross-platform issues
  :PROPERTIES:
  :CUSTOM_ID: Cross-platform-issues
  :END:

Ideally emacs configuration will "just work" regardless of the operating system (Windows, OSX, Linux, etc.) emacs is running on. In practice there are some tweaks required to get things working on Mac, and especially, Windows. These platform-specific issues can be largely avoided by starting with platform-specific versions of emacs.

- Emacs for Windows :: http://vgoulet.act.ulaval.ca/en/emacs/
- Emacs for OS X :: http://vgoulet.act.ulaval.ca/en/emacs/
- Emacs for Linux :: Use your package manager, or see http://www.gnu.org/software/emacs/

Note for Linux users: Emacs version $\geq$ 24 is required. If your Linux distro ships old and busted emacs you need to figure out how to install a recent version.

** Implementation
  :PROPERTIES:
  :CUSTOM_ID: Implementation
  :END:

The emacs configuration in the sections below implements the [[#Requirements][Requirements]] listed above.

*** Preamble

#+BEGIN_SRC emacs-lisp :tangle init.el
  ;;; COMMENTARY

  ;; This emacs configuration file sets some convenient defaults and activates 
  ;; emacs functionality useful to social scientists. 


  ;; NOTE FOR RCE USERS: RCE Emacs has some strange system configuration
  ;; settings. To use this init file on the RCE you need to start emacs with
  ;; emacs --no-site-file --no-site-lisp. This is a temporary requirement that
  ;; will eventually be resolved in cooperation with the RCE team.
#+END_SRC


*** Visual tweaks
Visual changes such as hiding the toolbar and scroll bar need to come first to avoid jarring transitions during startup.

#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; hide the toolbar
  (tool-bar-mode 0)
  (scroll-bar-mode 0)
  (menu-bar-mode 0)
  (setq inhibit-splash-screen t)
  (setq inhibit-startup-message t)
#+END_SRC

*** Install useful packages

#+BEGIN_SRC emacs-lisp :tangle init.el

  ;;; Install required packages

  ;; load the package manager
  (require 'package)

  ;; Add additional package sources
  (add-to-list 'package-archives 
               '("org" . "http://orgmode.org/elpa/") t)
  (add-to-list 'package-archives 
               '("melpa" . "http://melpa.milkbox.net/packages/") t)


  ;; Make a list of the packages you want
  (setq package-list '(leuven-theme
                       persistent-soft
                       unicode-fonts
                       async
                       helm
                       helm-descbinds
                       outline-magic
                       smooth-scroll
                       company
                       auctex
                       ess 
                       org-plus-contrib
                       markdown-mode 
                       polymode
                       eval-in-repl
                       elpy
                       cider
                       slime
                       htmlize
                       pcmpl-args
                       pcmpl-pip
                       readline-complete))

  ;; Activate package autoloads
  (package-initialize)

  ;; Fetch the list of packages available
  (when (not package-archive-contents)
    (package-refresh-contents))

  ;; Install packages in package-list if they are not already installed
  (dolist (package package-list)
    (when (not (package-installed-p package))
      (package-install package)))

#+END_SRC

*** Load theme
Loading the theme should come as early as possible in the init sequence to avoid jarring visual changes during startup, but must come after loading packages because we use a custom theme that needs to be installed first.

#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; finally a theme I can live with!
  (load-theme 'leuven t) 
  (setq org-fontify-whole-heading-line t)
#+END_SRC
*** Spell checking

#+BEGIN_SRC emacs-lisp :tangle init.el
;; enable on-the-fly spell checking
(add-hook 'text-mode-hook
          (lambda ()
            (flyspell-mode 1)))

;; prevent flyspell from finding mistakes in the code
(add-hook 'prog-mode-hook
          (lambda ()
            ;; `ispell-comments-and-strings'
            (flyspell-prog-mode)))
#+END_SRC

*** Fonts
Emacs fonts are "just OK" out of the box. Not bad, but not great either. Here we set fallback fonts for different Unicode blocks, dramatically increasing the number of characters Emacs will display.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (require 'persistent-soft)
  (require 'unicode-fonts)
  (unicode-fonts-setup)
#+END_SRC

*** Minibuffer hints and completion

#+BEGIN_SRC emacs-lisp :tangle init.el
  ;;; Completion hints for files and buffers buffers functions and more
  (require 'helm-config)
  (require 'helm-grep)

  ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
  ;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
  ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
  (global-set-key (kbd "C-c h") 'helm-command-prefix)
  (global-unset-key (kbd "C-x c"))
  ;; (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebihnd tab to do persistent action
  ;; (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
  ;; (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

  ;; (define-key helm-grep-mode-map (kbd "<return>")  'helm-grep-mode-jump-other-window)
  ;; (define-key helm-grep-mode-map (kbd "n")  'helm-grep-mode-jump-other-window-forward)
  ;; (define-key helm-grep-mode-map (kbd "p")  'helm-grep-mode-jump-other-window-backward)

  (when (executable-find "curl")
    (setq helm-google-suggest-use-curl-p t))

  (setq helm-quick-update                     t ; do not display invisible candidates
        helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
        helm-buffers-fuzzy-matching           t ; fuzzy matching buffer names when non--nil
        helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
        helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
  ;      helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
        helm-ff-file-name-history-use-recentf t)

  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
  (global-set-key (kbd "C-x b") 'helm-mini)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  
  (helm-mode 1)  

  (require 'helm-eshell)

  (add-hook 'eshell-mode-hook
            #'(lambda ()
                (define-key eshell-mode-map (kbd "M-l")  'helm-eshell-history)))
  (define-key shell-mode-map (kbd "C-c C-l") 'helm-comint-input-ring)
  
  (require 'helm-descbinds)
  (helm-descbinds-mode)
  ;; make sure helm gets updated correctly
  (require 'async-bytecomp)
#+END_SRC


*** Auto-complete (company-mode) configuration

#+BEGIN_SRC emacs-lisp :tangle init.el

  ;;; Auto-complete

  ;; Set up Company-mode for autocompletion
  (require 'company)
  (add-hook 'after-init-hook 'global-company-mode)
  (define-key company-active-map "\t" 'company-complete-selection)
  (define-key company-active-map "\r" nil)
  (define-key company-active-map [tab] 'company-complete-selection)
  (define-key company-active-map [return] nil)

#+END_SRC

*** Outline-magic

#+BEGIN_SRC emacs-lisp :tangle init.el
  ;;; Configure outline minor modes
  ;; Less crazy key bindings for outline-minor-mode
  (setq outline-minor-mode-prefix "\C-c\C-o")
  ;; load outline-magic along with outline-minor-mode
  (add-hook 'outline-minor-mode-hook 
            (lambda () 
              (require 'outline-magic)
              (define-key outline-minor-mode-map "\C-c\C-o\t" 'outline-cycle)))
  ;; turn on for some modes:
  (add-hook 'LaTeX-mode-hook 'outline-minor-mode t)
  (add-hook 'prog-mode-hook 'outline-minor-mode t)

#+END_SRC


*** Major modes configuration

**** LaTeX-mode

#+BEGIN_SRC emacs-lisp :tangle init.el

  ;;; AucTeX config
  ;; turn on math mode and and index to imenu
  (add-hook 'LaTeX-mode-hook 
            '(lambda ()
               (turn-on-reftex)
               (TeX-PDF-mode t)
               (LaTeX-math-mode)
               (imenu-add-to-menubar "Index")
  ;; Allow paragraph filling in tables
               (setq LaTeX-indent-environment-list
                     (delq (assoc "table" LaTeX-indent-environment-list)
                           LaTeX-indent-environment-list))
               (setq LaTeX-indent-environment-list
                     (delq (assoc "table*" LaTeX-indent-environment-list)
                           LaTeX-indent-environment-list))))
  ;; Misc. latex settings
  (setq TeX-parse-self t
        TeX-auto-save t)
  (setq-default TeX-master nil)
  ;; Add beamer frames to outline list
  (setq TeX-outline-extra
        '(("\\\\begin{frame}\n\\|\\\\begin{frame}.*{.*}\\|[       ]*\\\\frametitle\\b" 3)))
  ;; reftex settings
  (setq reftex-enable-partial-scans t)
  (setq reftex-save-parse-info t)
  (setq reftex-use-multiple-selection-buffers t)
  (setq reftex-plug-into-AUCTeX t)
  (add-hook 'bibtex-mode-hook
            '(lambda ()
               (define-key bibtex-mode-map "\M-q" 'bibtex-fill-entry)))

#+END_SRC


**** Markdown mode

#+BEGIN_SRC emacs-lisp :tangle init.el

  ;;; markdown mode

  ;; Use markdown-mode for files with .markdown or .md extensions
  (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

#+END_SRC

**** Org-mode

#+BEGIN_SRC emacs-lisp :tangle init.el

  (require 'org)

  ;; Load additional export formats
  ;; (require 'ox-odt)
  ;; (require 'ox-md)
  ;; (require 'ox-freemind)
  ;; (require 'ox-bibtex)

  ;; Update images from babel code blocks automatically
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)

  ;; Enable common programming language support in org-mode
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((R . t)
     (python . t)
     (matlab . t)
     (emacs-lisp . t)
     ;; (sh . t)
     ;; (dot . t)
     ;; (latex . t)
     ;; (octave . t)
     ;; (ditaa . t)
     ;; (org . t)
     ;; (perl . t)
  ))

  ;; Set sensible mode for editing dot files
  (add-to-list 'org-src-lang-modes '("dot" . graphviz-dot))

  ;; Fontify code blocks in org-mode
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)

#+END_SRC

**** Emacs Speaks Statistics

#+BEGIN_SRC emacs-lisp :tangle init.el
  ;;;  ESS (Emacs Speaks Statistics)

  ;; Start R in the working directory by default
  (setq ess-ask-for-ess-directory nil)

  ;; Scroll down when R generates output
  (setq comint-scroll-to-bottom-on-input t)
  (setq comint-scroll-to-bottom-on-output t)
  (setq comint-move-point-for-output t)

  ;; Make sure ESS is loaded
  (require 'ess-site)

#+END_SRC

**** Polymode

#+BEGIN_SRC emacs-lisp :tangle init.el

  ;;; polymode

  ;; polymode requires emacs >= 24.3, does not work on the RCE. 
  (when (>= (string-to-number 
             (concat 
              (number-to-string emacs-major-version) 
              "." 
              (number-to-string emacs-minor-version)))
            24.3)
    ;; Activate polymode for files with the .md extension
    (add-to-list 'auto-mode-alist '("\\.md" . poly-markdown-mode))
    ;; Activate polymode for R related modes
    (add-to-list 'auto-mode-alist '("\\.Snw" . poly-noweb+r-mode))
    (add-to-list 'auto-mode-alist '("\\.Rnw" . poly-noweb+r-mode))
    (add-to-list 'auto-mode-alist '("\\.Rmd" . poly-markdown+r-mode))
    (add-to-list 'auto-mode-alist '("\\.rapport" . poly-rapport-mode))
    (add-to-list 'auto-mode-alist '("\\.Rhtml" . poly-html+r-mode))
    (add-to-list 'auto-mode-alist '("\\.Rbrew" . poly-brew+r-mode))
    (add-to-list 'auto-mode-alist '("\\.Rcpp" . poly-r+c++-mode))
    (add-to-list 'auto-mode-alist '("\\.cppR" . poly-c++r-mode)))

#+END_SRC

*** Miscellaneous

#+BEGIN_SRC emacs-lisp :tangle init.el

  ;;; Misc. Conveniences

  ;; use regex search by default
  (global-set-key (kbd "C-s") 'isearch-forward-regexp)
  (global-set-key (kbd "C-r") 'isearch-backward-regexp)

  ;; Use spaces for indentation
  (setq-default indent-tabs-mode nil)

  ;; Make sure copy-and-paste works with other programs
  (setq x-select-enable-clipboard t
        x-select-enable-primary t
        save-interprogram-paste-before-kill t)

  ;; Text pasted with mouse should be inserted at cursor position
  (setq mouse-yank-at-point t)

  ;; Mouse scrolling behavior
    (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
    (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse

  ;; Put backups in a separate folder
  (setq backup-directory-alist `(("." . ,(concat user-emacs-directory
                                                 "backups"))))

  ;; Apropos commands should search everything
  (setq apropos-do-all t)

  ;; Store the places file in the emacs user directory
  (setq save-place-file (concat user-emacs-directory "places"))


  ;; better naming of duplicate buffers
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)

  ;; put cursor in last used position when re-opening file
  (require 'saveplace)
  (setq-default save-place t)

  ;; Use y/n instead of yes/no
  (fset 'yes-or-no-p 'y-or-n-p)

  (transient-mark-mode 1) ; makes the region visible
  (line-number-mode 1)    ; makes the line number show up
  (column-number-mode 1)  ; makes the column number show up

  (setq global-font-lock-mode 1) ; everything should use fonts
  (setq font-lock-maximum-decoration t) ;; decorate as much as possible
  (show-paren-mode t) ;; highlight matching paren

  ;; smooth scrolling with C-up/C-down
  (require 'smooth-scroll)
  (smooth-scroll-mode)
  (global-set-key [(control down)] 'scroll-up-1)
  (global-set-key [(control up)] 'scroll-down-1)
  (global-set-key [(control left)] 'scroll-right-1)
  (global-set-key [(control right)] 'scroll-left-1)

  ;; enable toggling paragraph fill
  (defun compact-uncompact-block ()
    "Remove or add line ending chars on current paragraph.
  This command is similar to a toggle of `fill-paragraph'.
  When there is a text selection, act on the region."
    (interactive)
    ;; This command symbol has a property “'stateIsCompact-p”.
    (let (currentStateIsCompact (bigFillColumnVal most-positive-fixnum) (deactivate-mark nil))
      (save-excursion
        ;; Determine whether the text is currently compact.
        (setq currentStateIsCompact
              (if (eq last-command this-command)
                  (get this-command 'stateIsCompact-p)
                (if (> (- (line-end-position) (line-beginning-position)) fill-column) t nil)))
        (if (use-region-p)
            (if currentStateIsCompact
                (fill-region (region-beginning) (region-end))
              (let ((fill-column bigFillColumnVal))
                (fill-region (region-beginning) (region-end))))
          (if currentStateIsCompact
              (fill-paragraph nil)
            (let ((fill-column bigFillColumnVal))
              (fill-paragraph nil))))
        (put this-command 'stateIsCompact-p (if currentStateIsCompact nil t)))))

  (global-set-key (kbd "M-q") 'compact-uncompact-block)

  ;; visual line mode
  (global-visual-line-mode 1) 

  ;; don't require two spaces for sentence end.
  (setq sentence-end-double-space nil)

  ;; Use CUA mode only for handy rectangle features
  (cua-selection-mode t)

  ;; windmove is nice but hard to find free key-binding...
  (windmove-default-keybindings 'super)

  ;; The beeping can be annoying--turn it off
  (set-variable 'visible-bell t)

  ;; save settings made using the customize interface to a sparate file
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (unless (file-exists-p custom-file)
    (write-region "" nil custom-file))
  (byte-recompile-file custom-file nil 0 nil)
  (load (concat user-emacs-directory "custom.elc") 'noerror)

  ;; byte-compile init file if needed
  (byte-recompile-file user-init-file nil 0 nil)
#+END_SRC

** Implementation issues
The version of Emacs on the RCE is old and configured in a non-standard way that makes it difficult to implement a sane user config. 

Part of the problem is that RCE does not run the latest released emacs; another problem is that a site-wide configuration file activates the package system, adds third-party package repositories, and installs some packages. Normally the package system is not activated until after the users init file, doing it in the reverse order (as is currently done on the RCE) causes problems. These issues cause breakages for the command-hinter =smex=, the literate programming support provided by =polymode=, and interfere with the installation of the latest org-mode.

Both the "old emacs" and "strange emacs configuration" problems need to be corrected at the system admin level on the RCE. For the moment if you want to use this configuration on the RCE you need to start emacs with =emacs --no-site-file --no-site-lisp= so that the latest org-mode can be installed. The emacs configuration implemented here includes a dirty hack to make =smex= work on older emacs, so the only remaining issue is that =polymode= will not work on the RCE until the emacs installed there is updated. The configuration simply checks the emacs version and only activates =polymode= if it is supported.


** Next steps
  :PROPERTIES:
  :CUSTOM_ID: Next-steps
  :END:

The next steps are to 1) review the requirements list to add/delete requirements needed, 2) update the configuration file to add any additional requirements added in step 2, and 3) test/evaluate the configuration and revise until it performs as desired.


* Footnotes

[fn:1] See ticket [[https://help.hmdc.harvard.edu/Ticket/Display.html?id=179621][179621]].

