# -*- eval: (save-excursion (org-babel-goto-named-src-block "Preamble") (org-babel-execute-src-block)) -*-
#+AUTHOR:  Ista Zahn
#+TITLE: An emacs config for social scientists

#+STARTUP: showall
#+PROPERTY: header-args:emacs-lisp    :tangle init.el

#+NAME: Preamble
#+BEGIN_SRC emacs-lisp :results silent :exports none :tangle no
  (require 'ox-gfm)
#+END_SRC

* Quick start
:PROPERTIES:
:CUSTOM_ID: quick-start
:END:

** What is this?
:PROPERTIES:
:CUSTOM_ID: what-is-this
:END:
This is a drop-in replacement for your .emacs.d. It automatically installs and configures several emacs packages useful for working with LaTeX documents, and for writing code for statistical analysis in R, Stata, SAS, and Julia. It also turns on several built-in features of emacs such as spell checking and syntax highlighting.

** How to I install it?
:PROPERTIES:
:CUSTOM_ID: how-do-i-install-it
:END:
1) Make sure emacs >= version 24.3 is installed on your computer. See [[#suggested-external-programs][Suggested-external-programs]] for installation instructions.
2) Make sure you have [[http://git-scm.com/downloads][git]] installed on your computer. If you don't know what git is you might be interested in John McDonnell's [[http://nyuccl.org/pages/GitTutorial/][git tutorial]].
3) Determine your emacs configuration directory. Open emacs and type =C-x f ~/ RET=. This should open a directory listing buffer. Note the path at the top of this file. This is were your =.emacs.d= should go.
4) Close Emacs.
6) Back up your existing =~/.emacs= file and =~/.emacs.d= directory (e.g., rename =.emacs= to =OLD.emacs= and rename =.emacs.d= to =OLD.emacs.d=).
6) Clone this repository into =~/.emacs.d= by opening a terminal and running =git clone http://github.com/izahn/dotemacs ~/.emacs.d=.

If you don't know how to use git, you can skip step 6 and simply [[https://github.com/izahn/dotemacs/archive/master.zip][download the files as a zip archive]], extract them, and move them into your .emacs.d directory.

** First run
:PROPERTIES:
:CUSTOM_ID: first-run
:END:
Note that after installing this configuration emacs will be extremely slow to start up the first time. This is due to package installation, and to a one-time scan of the fonts installed on your computer. Just be patient and wait for it to finish--subsequent start-ups will be much faster.

** Modified key bindings
:PROPERTIES:
:CUSTOM_ID: modified-key-bindings
:END:
This configuration loads a lot of useful emacs packages (see[[#suggested-external-programs][Suggested external programs]] for the list), many of which add key bindings. Documenting them all here would be too much (see the documentation for each package if you need the details), so this section describes only those key bindings that we explicitly added or changed.

*** Completion keys
:PROPERTIES:
:CUSTOM_ID: completion-keys
:END:
- C-TAB :: Mapped to =company-complete=, use for pop-up completion menu.
- M-y :: Remapped to =helm-show-kill-ring= to browse the kill ring interactively.
- C-x f :: Mapped to =helm-recentf= to select recently opened files.
- M-x :: Remapped to =helm-M-x= to interactively search for interactive functions.

*** Other key bindings
:PROPERTIES:
:CUSTOM_ID: other-key-bindings
:END:
- E :: Open in external application (dired mode only)
- C-up :: Mapped to =scroll-down-1=.
- C-down :: Mapped to =scroll-up-1=.
- C-c C-c :: Mapped to functions that execute code in several major modes, including shell mode, python mode, ielm mode, lisp-interaction mode, and ess mode.
- M-Q :: Mapped to =unfill-paragraph=, use to remove line breaks from a paragraph.
- C-c C-o t :: Mapped to =outline-cycle=, use to hide/show when outline-minor-mode is active (outline-minor mode is enabled in programming modes and in LaTeX-mode).
- M-q :: Remapped to =bibtex-fill-entry= (bibtex mode only).
- S-M-right :: (shift + meta + right arrow key) mapped to =windmove-right=; selects the window to the right of the currently active window. =S-M-left=, =S-M-up= and =S-M-down= also mapped to the corresponding windmove functions.



** Suggested external programs
  :PROPERTIES:
  :CUSTOM_ID: suggested-external-programs
  :END:
Some of the requirements listed in [[#requirements][Requirements]] make use of software that must be installed outside of emacs. And of course you will need emacs itself! 

*** External program download and installation
:PROPERTIES:
:CUSTOM_ID: external-program-download-and-installation
:END:
While emacs alone is very powerful, one of it's most important strengths is its ability to inter-operate with other software programs. Links to the download pages for several programs that can be used from with emacs are provided below (they are also very useful on their own!). Installation of all these programs follows normal conventions on each platform, just download, run the installer, and follow the instructions.

**** Windows
:PROPERTIES:
:CUSTOM_ID: windows
:END:
- Emacs :: http://vgoulet.act.ulaval.ca/en/emacs/
- R :: http://cran.r-project.org/bin/windows/base/
- LaTeX :: http://miktex.org/download
- git :: http://git-scm.com/download/win
- Pandoc :: https://github.com/jgm/pandoc/releases
- GhostScript :: http://www.ghostscript.com/download/gsdnld.html (Make sure to *install the 32 bit version*!)

**** OSX
:PROPERTIES:
:CUSTOM_ID: osx
:END:
- Emacs :: http://vgoulet.act.ulaval.ca/en/emacs/
- R :: http://cran.r-project.org/bin/macosx/
- LaTeX :: http://tug.org/mactex/
- git :: http://git-scm.com/download/mac
- Pandoc :: https://github.com/jgm/pandoc/releases
- GhostScript :: http://pages.uoregon.edu/koch/

**** Linux
:PROPERTIES:
:CUSTOM_ID: linux
:END:
- Emacs :: Use your package manager, or see http://www.gnu.org/software/emacs/#Obtaining
- R :: Use your package manager, or see http://cran.r-project.org/bin/linux/
- LaTeX :: Use your package manager, or see https://www.tug.org/texlive/quickinstall.html
- git :: Use your package manager, or see http://git-scm.com/download/linux
- Pandoc :: Use your package manager, or see http://johnmacfarlane.net/pandoc/installing.html#all-platforms
- GhostScript :: Use your package manager, or see http://www.ghostscript.com/download/gsdnld.html

*** External program configuration and use
:PROPERTIES:
:CUSTOM_ID: external-program-configuration-and-use
:END:
While a detailed instructions on how to use these programs would take years, you can get started with the quickly. Here are some quick pointers and links to more detailed tutorials.

**** Emacs
:PROPERTIES:
:CUSTOM_ID: emacs
:END:
Emacs configuration is complex, and we will not go into it here except to say that the main configuration file is named =init.el= and can usually be found in a directory named =.emacs.d=, which is usually in your home directory. As mentioned in [[#quick-start][Quick start]] and  [[#discussion-and-implementation]] there are many pre-packaged emacs configurations that you can use simply by copying them to your =.emacs.d= directory.

You can almost just start emacs and start typing as you would in any other text editor, though you should be aware that Emacs uses different keyboard shortcuts than those you may be accustomed to. There is a introductory tutorial built into Emacs that you can access from the Help menu; IBM provides another excellent [[http://www.ibm.com/developerworks/aix/tutorials/au-emacs1/index.html][emacs tutorial]].

**** R
:PROPERTIES:
:CUSTOM_ID: r
:END:
R is a free language and environment for statistical computing. It works well out of the box and does not require much in the way of configuration. If you want to learn more about R the [[http://r-project.org][official R website]] is a good place to start and includes many excellent [[http://cran.r-project.org/manuals.html][manuals]] and [[http://cran.r-project.org/other-docs.html][tutorials]].

**** LaTeX
:PROPERTIES:
:CUSTOM_ID: latex
:END:
LaTeX is a typesetting system that excels at formatting structured documents. LaTeX files are written in plain text using a markup syntax, and this markup is used to format the typeset document. LaTeX works well out of the box and does not typically require much in the way of configuration. If you want to learn more about LaTeX try [[http://www.andy-roberts.net/writing/latex][these LaTeX tutorials]] by Andrew Roberts.

**** git
:PROPERTIES:
:CUSTOM_ID: git
:END:

***** Initial configuration
[[http://git-scm.com/][git]] is a revision control system that allows you to track changes, merge changes with those made by collaborators, revert to previous versions, and more. While git can be used without any configuration, it is a good idea to at least set your user name and email; instructions for doing so are available at [[http://git-scm.com/book/en/Getting-Started-First-Time-Git-Setup]]; a detailed introduction to git is available at [[http://git-scm.com/book/en/]]. Once installed you can use git from the command line; on Windows use the =git bash= application, on other platforms use your regular terminal emulator.

It is often convenient to tell git /not/ to track some types of files (e.g., temporary files, or large binary files). LaTeX users in particular may be annoyed that git tries to track their .aux, .log, and other ephemeral files produced by LaTeX. You can tell git to ignore certain types of files by listing the in a .gitignore file. Details on .gitignore files are available at [[http://git-scm.com/docs/gitignore]], and many useful templates (including one designed for LaTeX users) are available at [[https://github.com/github/gitignore]].


***** github
Many git users host their repositories on [[http://github.com]]; helpful guides are available at [[https://guides.github.com/]]. You can [[https://help.github.com/articles/which-remote-url-should-i-use/][clone from and push to github over https]], and that is the recommended method; no configuration is required. If for some reason you prefer to use ssh you will need an ssh key pair; see [[https://help.github.com/articles/generating-ssh-keys/]] for instructions.

***** Using git from emacs
This Emacs configuration includes [[https://magit.github.io/][magit]], and interface to git for Emacs. Documentation is available at [[https://github.com/magit/magit#getting-started]].


**** Pandoc
:PROPERTIES:
:CUSTOM_ID: pandoc
:END:
Pandoc is a program for converting markup files from one markup language to another. Documentation and examples are available on the [[http://johnmacfarlane.net/pandoc/][pandoc website]].

**** GhostScript
:PROPERTIES:
:CUSTOM_ID: ghostscript
:END:
GhostScript is a program for working the postscript and pdf files. While it can be used on its own it is included in this list only because it makes printing from emacs easier, especially on Windows. No configuration should be required. Note that *on windows you need the 32 bit version*, the 64 bit version will not work. Windows users will also need to add it to their PATH (see [[http://www.computerhope.com/issues/ch000549.htm]] for instructions).

* Discussion and implementation
:PROPERTIES:
:CUSTOM_ID: discussion-and-implementation
:END:

** What the world needs now...
:PROPERTIES:
:CUSTOM_ID: what-the-world-needs-now
:END:
As of August 5th 2014 there are 2,960 github repositories named or mentioning '.emacs.d', and another 627 named or mentioning "dotemacs". Some of these are just personal emacs configurations, but many take pains to provide documentation and instruction for adopting them as your very own emacs configuration. And that's not to mention the [[https://github.com/search?q=emacs-starter-kit&type=Repositories&ref=searchresults][starter-kits]], [[https://github.com/search?q=emacs+prelude&type=Repositories&ref=searchresults][preludes]] and [[https://github.com/search?q=emacs+oh+my&type=Repositories&ref=searchresults][oh my emacs]] of the world! With all these options, does the world really need yet another emacs configuration? 

No, the world does not need another emacs starter kit. Indeed the guy who started the original emacs starter-kit has concluded that the whole idea is [[https://github.com/technomancy/emacs-starter-kit][unworkable]], and that if you want to use emacs you're better off configuring it yourself. I agree, and it's not that hard, even if you don't know emacs-lisp at all. You can copy code fragments from others' configuration on [[http://github.com][github]], from the [[http://emacswiki.org][emacs wiki]], or from [[http://stackoverflow.com][stackoverflow]] and build up your very own emacs configuration. And eventually it will be so perfect you will think "gee I could save people the trouble of configuring emacs, if they would just clone my configuration". So you will put it on github, like everyone else (including me). Sigh.

On the other hand it may be that this emacs configuration is what you want after all. It turns on many nice features of emacs, and adds many more. Anyway it does not hurt to give it a try.


** Requirements
  :PROPERTIES:
  :CUSTOM_ID: requirements
  :END:

Emacs is many things to many people, being perhaps the most configurable text editor ever created. However, there are some common tools that social scientists often make use of that are not accessible in emacs by default. It is therefore desirable to create a base configuration that enables the features that social scientists are likely to find useful. The table below lists some of these requirements, and describes how they are made available in emacs.
 

| Requirement                        | Categories         | Solution               | Notes                                          |
|------------------------------------+--------------------+------------------------+------------------------------------------------|
| LaTeX editing/compilation          | Document prep      | AucTeX/RefTeX          | Installed and turned on                        |
| Font locking                       | Look-n-feel        | font-lock-mode         | Built-in, turned on                            |
| Spell checking                     | Convenience        | ispell/flyspell        | Built-in, turned on                            |
| Outline/structure editing          | Convenience        | outline-minor-mode     | Built-in, turned on                            |
| Revision control                   | Version management | VC-mode/magit          | VC-mode, turned on, magit installed/activated  |
| Edit/evaluate R/Stata/SAS          | Data analysis      | ESS                    | Installed and activated                        |
| Easier file/buffer/access          | Convenience        | helm                   | Installed, turned on                           |
| Reproducible research              | Data analysis      | org-mode, polymode     | Installed, polymode (Melpa) not working on RCE |
| Copy/paste with other apps         | Convenience        | x-select               | Built-in, turned on                            |
| Word wrapping                      | Look-n-feel        | visual-line-mode       | Built-in, turned on                            |
| Command hinting/completion         | Convenience        | helm                   | Installed and turned on                        |
| Programming auto-completion        | Convenience        | auto-complete/Company  | Installed and turned on                        |
| Keep backup files out of the way   | Convenience        | backup-directory-alist | Built-in, turned on                            |
| Cleaner interface                  | Look-n-feel        | tool-bar-mode          | Built-in, off by default                       |
| Highlight matched/mismatched paren | Convenience        | show-paren-mode        | Built-in, turned on                            |
|------------------------------------+--------------------+------------------------+------------------------------------------------|

** Implementation
  :PROPERTIES:
  :CUSTOM_ID: implementation
  :END:

The emacs configuration in the sections below implements the [[#requirements][Requirements]] listed above.


*** Preamble
:PROPERTIES:
:CUSTOM_ID: preamble
:END:

#+BEGIN_SRC emacs-lisp
  ;;; COMMENTARY

  ;; This emacs configuration file sets some convenient defaults and activates 
  ;; emacs functionality useful to social scientists. 


  ;; NOTE FOR RCE USERS: RCE Emacs has some strange system configuration
  ;; settings. To use this init file on the RCE you need to start emacs with
  ;; emacs --no-site-file --no-site-lisp. This is a temporary requirement that
  ;; will eventually be resolved in cooperation with the RCE team.
#+END_SRC

*** Version check
:PROPERTIES:
:CUSTOM_ID: version-check
:END:
It is difficult to support multiple versions of emacs, so we will pick an arbitrary cutoff and throw an error if the version of emacs is "too old".

#+BEGIN_SRC emacs-lisp
  (when (< (string-to-number 
             (concat 
              (number-to-string emacs-major-version) 
              "." 
              (number-to-string emacs-minor-version)))
            24.2)
    (error "Your version of emacs is very old and must be upgraded before you can use these packages"))
#+END_SRC

*** Visual tweaks
:PROPERTIES:
:CUSTOM_ID: visual-tweaks
:END:
Visual changes such as hiding the toolbar need to come first to avoid jarring transitions during startup.

#+BEGIN_SRC emacs-lisp
  ;; use desktop mode, but only for frame layout
  ;; and only if running in windowed mode
  (when (display-graphic-p)
    (setq desktop-load-locked-desktop t)
    (setq desktop-buffers-not-to-save "^.*$")
    (setq desktop-files-not-to-save "^.*$")
    (setq desktop-save t)
    (setq desktop-auto-save-timeout nil)
    (setq desktop-globals-to-save nil)
    (setq desktop-locals-to-save nil)
    (desktop-save-mode 1)
    ;; always use fancy-startup, even on small screens
    ;; but only if running in windowed mode
    (defun always-use-fancy-splash-screens-p () 1)
    (defalias 'use-fancy-splash-screens-p 'always-use-fancy-splash-screens-p)
    (add-hook 'after-init-hook
              (lambda()
                (if inhibit-startup-screen
                    (add-hook 'emacs-startup-hook 
                              (lambda() (switch-to-buffer "*scratch*")))
                  (add-hook 'desktop-after-read-hook 'fancy-startup-screen)))))

  ;; hide the toolbar
  (tool-bar-mode 0)
  ;; (menu-bar-mode 0)

#+END_SRC

*** Install useful packages
:PROPERTIES:
:CUSTOM_ID: install-useful-packages
:END:
The main purpose of these emacs configuration files is to install and configure useful emacs packages. Here we carry out the installation.

#+BEGIN_SRC emacs-lisp
  ;; set coding system so emacs doesn't choke on melpa file listings
  (set-language-environment 'utf-8)
  (set-keyboard-coding-system 'utf-8-mac) ; For old Carbon emacs on OS X only
  (setq locale-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (unless (eq system-type 'windows-nt)
    (set-selection-coding-system 'utf-8))
  (prefer-coding-system 'utf-8)

  ;;; Install required packages
  (require 'cl)

  ;; set things that need to be set before packages load
  ; Less crazy key bindings for outline-minor-mode
  (setq outline-minor-mode-prefix "\C-c\C-o")
  (add-hook 'outline-minor-mode-hook
            (lambda () (local-set-key "\C-c\C-o"
                                      outline-mode-prefix-map)))

  ;; load site-start early so we can override it later
  (load "default" t t)
  ;; prevent site-start from running again later
  (setq inhibit-default-init t)

  ;; load the package manager
  (require 'package)

  ;; Add additional package sources
  (add-to-list 'package-archives 
               '("org" . "http://orgmode.org/elpa/") t)
  (add-to-list 'package-archives 
               '("melpa" . "http://melpa.milkbox.net/packages/") t)

  ;; Make a list of the packages you want
  (setq my-package-list '(;; gnu packages
                          auctex
                          windresize
                          diff-hl
                          ;; melpa packages
                          auctex-latexmk
                          helm
                          helm-descbinds
                          helm-bibtex
                          diminish
                          multi-term
                          anzu
                          howdoi
                          google-this
                          leuven-theme
                          powerline
                          persistent-soft
                          unicode-fonts
                          dired+
                          mouse3
                          outline-magic
                          smooth-scroll
                          company
                          company-math
                          ess
                          markdown-mode
                          polymode
                          eval-in-repl
                          pyvenv
                          elpy
                          exec-path-from-shell
                          htmlize
                          pcmpl-args
                          pcmpl-pip
                          readline-complete
                          magit
                          ;; org-mode packages
                          org-plus-contrib))

  ;; Activate package autoloads
  (package-initialize)
  (setq package-initialize nil)

  ;; make sure stale packages don't get loaded
  (dolist (package my-package-list)
    (if (featurep package)
        (unload-feature package t)))
  ;; Install packages in package-list if they are not already installed
  (unless (every #'package-installed-p my-package-list)
    (switch-to-buffer "*scratch*")
    (erase-buffer)
    (setq my-this-buffer (buffer-name))
    (delete-other-windows)
    (insert "Please wait while emacs configures itself...")
    (redisplay t)
    (redisplay t)
    (package-refresh-contents)
    (dolist (package my-package-list)
      (when (not (package-installed-p package))
        (package-install package)))
      (switch-to-buffer "*scratch*")
    (erase-buffer)
    (add-to-list 'fancy-startup-text
                 '(:face
                   (variable-pitch default)
                   "Your emacs has been configured for maximum productivity. 
  For best results please restart emacs now.
  More information about this emacs configuration be found
  at http://github.com/izahn/dotemacs. If you have any problems
  or have a feature request please open a bug report at
  http://github.com/izahn/dotemacs/issues
  ")))

  (add-to-list 'fancy-startup-text
               '(:face
                 (variable-pitch default)
                 "\nYou are running a customized Emacs configuration. See "  :link
                 ("here"
                  #[257 "\300\301!\207"
                        [browse-url-default-browser "http://github.com/izahn/dotemacs/"]
                        3 "\n\n(fn BUTTON)"]
                  "Open the README file")
                 "\nfor information about these customizations.\n"))

#+END_SRC

#+RESULTS:

*** Load theme
:PROPERTIES:
:CUSTOM_ID: load-theme
:END:
Loading the theme should come as early as possible in the init sequence to avoid jarring visual changes during startup, but must come after loading packages because we use a custom theme that needs to be installed first.

#+BEGIN_SRC emacs-lisp
  ;; finally a theme I can live with!
  (load-theme 'leuven t) 
  ;; but it still needs a few tweeks
  (setq org-fontify-whole-heading-line nil)

  ;; mode line theme
  (require 'powerline)
  ;; face for remote files in modeline
  (defface my-mode-line-attention
  '((t (:foreground "magenta" :weight bold)))
   "face for calling attention to modeline")

  ;; highlight hostname if on remote
  (defconst my-mode-line-buffer-identification
    '(:eval
      (list
       (propertize
        (if (file-remote-p default-directory 'host)
            (progn
        (let ((host-name
               (or (file-remote-p default-directory 'host)
                   (system-name))))
          (if (string-match "^[^0-9][^.]*\\(\\..*\\)" host-name)
              (substring host-name 0 (match-beginning 1))
            host-name)))
          "")
        'face
        (if (file-remote-p default-directory 'host)
            'my-mode-line-attention
          'mode-line-buffer-id))
     (propertize ": %b"
                 'face
                   (if (file-remote-p default-directory 'host)
                       'my-mode-line-attention
                     'mode-line-buffer-id)))))

  ;; powerline theme using above info about remote hosts.
  (defun powerline-my-theme ()
    "Setup the default mode-line."
    (interactive)
    (setq-default mode-line-format
                  '("%e"
                    (:eval
                     (let* ((active (powerline-selected-window-active))
                            (mode-line (if active 'mode-line 'mode-line-inactive))
                            (face1 (if active 'powerline-active1 'powerline-inactive1))
                            (face2 (if active 'powerline-active2 'powerline-inactive2))
                            (separator-left (intern (format "powerline-%s-%s"
                                                            powerline-default-separator
                                                            (car powerline-default-separator-dir))))
                            (separator-right (intern (format "powerline-%s-%s"
                                                             powerline-default-separator
                                                             (cdr powerline-default-separator-dir))))
                            (lhs (list (powerline-raw "%*" nil 'l)
                                       (powerline-buffer-size nil 'l)
                                       (powerline-raw mode-line-mule-info nil 'l)
                                       (powerline-raw mode-line-remote nil 'l)
                                       (powerline-raw my-mode-line-buffer-identification nil 'l)
                                       (when (and (boundp 'which-func-mode) which-func-mode)
                                         (powerline-raw which-func-format nil 'l))
                                       (powerline-raw " ")
                                       (funcall separator-left mode-line face1)
                                       (when (boundp 'erc-modified-channels-object)
                                         (powerline-raw erc-modified-channels-object face1 'l))
                                       (powerline-major-mode face1 'l)
                                       (powerline-process face1)
                                       (powerline-minor-modes face1 'l)
                                       (powerline-narrow face1 'l)
                                       (powerline-raw " " face1)
                                       (funcall separator-left face1 face2)
                                       (powerline-vc face2 'r)))
                            (rhs (list (powerline-raw global-mode-string face2 'r)
                                       (funcall separator-right face2 face1)
                                       (powerline-raw "%4l" face1 'l)
                                       (powerline-raw ":" face1 'l)
                                       (powerline-raw "%3c" face1 'r)
                                       (funcall separator-right face1 mode-line)
                                       (powerline-raw " ")
                                       (powerline-raw "%6p" nil 'r)
                                       (powerline-hud face2 face1))))
                       (concat (powerline-render lhs)
                               (powerline-fill face2 (powerline-width rhs))
                               (powerline-render rhs)))))))

  (powerline-my-theme)
  (powerline-my-theme)

#+END_SRC
*** Add custom lisp directory to load path
:PROPERTIES:
:CUSTOM_ID: add-custom-lisp-directory-to-load-path
:END:
We try to install most things using the package manager, but a few things need to be included in a custom lisp directory. Add it to the path so we can load from it easily.
#+BEGIN_SRC emacs-lisp
  ;; add custom lisp directory to path
  (let ((default-directory (concat user-emacs-directory "lisp/")))
    (setq load-path
          (append
           (let ((load-path (copy-sequence load-path))) ;; Shadow
             (append 
              (copy-sequence (normal-top-level-add-to-load-path '(".")))
              (normal-top-level-add-subdirs-to-load-path)))
           load-path)))

  ;; on OSX Emacs needs help setting up the system paths
  (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize))

#+END_SRC
*** Spell checking
:PROPERTIES:
:CUSTOM_ID: spell-checking
:END:

#+BEGIN_SRC emacs-lisp
  ;; enable on-the-fly spell checking
  (add-hook 'emacs-startup-hook
            (lambda()
              (add-hook 'text-mode-hook
                        (lambda ()
                          (flyspell-mode 1)))
              ;; prevent flyspell from finding mistakes in the code
              (add-hook 'prog-mode-hook
                        (lambda ()
                          ;; `ispell-comments-and-strings'
                          (flyspell-prog-mode)))))

  ;; ispell should not check code blocks in org mode
  (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
  (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_SRC" . "#\\+END_SRC"))
  (add-to-list 'ispell-skip-region-alist '("#\\+begin_src" . "#\\+end_src"))
  (add-to-list 'ispell-skip-region-alist '("^#\\+begin_example " . "#\\+end_example$"))
  (add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_EXAMPLE " . "#\\+END_EXAMPLE$"))
#+END_SRC

*** Fonts
:PROPERTIES:
:CUSTOM_ID: fonts
:END:
Emacs fonts are "just OK" out of the box. Not bad, but not great either. Here we set fallback fonts for different Unicode blocks, dramatically increasing the number of characters Emacs will display.

#+BEGIN_SRC emacs-lisp
  ;; unicode-fonts doesn't work well on emacs < 24.3
  (when (>= (string-to-number 
               (concat 
                (number-to-string emacs-major-version) 
                "." 
                (number-to-string emacs-minor-version)))
              24.3)
    (require 'persistent-soft)
    (require 'unicode-fonts)
    (unicode-fonts-setup))

#+END_SRC

*** Printing
:PROPERTIES:
:CUSTOM_ID: printing
:END:
If you're using [[http://vgoulet.act.ulaval.ca/en/emacs/windows/][Vincent Goulet's emacs]] on Windows printing should work out of the box. If you're on Linux or Mac the experience of printing from emacs may leave something to be desired. Here we try to make it work a little better by making it easier to preview buffers in a web browser (you can print from there as usual) and by using [[http://sourceforge.net/projects/gtklp/][gtklp]] on Linux if it is available.

#+BEGIN_SRC emacs-lisp

  (when (eq system-type 'gnu/linux)
    (setq hfyview-quick-print-in-files-menu t)
    (require 'hfyview)
    (setq mygtklp (executable-find "gtklp"))
    (when mygtklp
      (setq lpr-command "gtklp")
      (setq ps-lpr-command "gtklp")))

  (when (eq system-type 'darwin)
    (setq hfyview-quick-print-in-files-menu t)
    (require 'hfyview))
#+END_SRC

*** Minibuffer hints and completion
:PROPERTIES:
:CUSTOM_ID: minibuffer-hints-and-completion
:END:
There are several different systems for providing completion hints in emacs. The default pcomplete system shows completions on demand (usually bound to tab key) in an emacs buffer. Here we set up ido-mode, which instead shows these completions on-the-fly in the minibuffer. These completions are primarily used to show available files (e.g., with ~find-file~) and emacs functions (e.g., with ~execute-extended-command~). Completion for in-buffer text (e.g., methods in python-mode, or arguments in R-mode) are handled separately by [[#auto-complete-configuration][company-mode]].

#+BEGIN_SRC emacs-lisp
  ;;; Completion hints for files and buffers buffers
  (require 'helm-config)
  (helm-mode 1)
  ;; helm global-map
  (global-set-key (kbd "M-x")                          'undefined)
  (global-set-key (kbd "M-x")                          'helm-M-x)
  (global-set-key (kbd "C-x b")                        'helm-buffers-list)
  (global-set-key (kbd "M-y")                          'helm-show-kill-ring)
  (global-set-key (kbd "C-c f")                        'helm-recentf)
  (global-set-key (kbd "C-x C-f")                      'helm-find-files)
  (global-set-key (kbd "C-c <SPC>")                    'helm-all-mark-rings)
  (global-set-key (kbd "C-x r b")                      'helm-filtered-bookmarks)
  (global-set-key (kbd "C-h r")                        'helm-info-emacs)
  (global-set-key (kbd "C-:")                          'helm-eval-expression-with-eldoc)
  (global-set-key (kbd "C-,")                          'helm-calcul-expression)
  (global-set-key (kbd "C-h i")                        'helm-info-at-point)
  (global-set-key (kbd "C-x C-d")                      'helm-browse-project)
  (global-set-key (kbd "<f1>")                         'helm-resume)
  (global-set-key (kbd "C-h C-f")                      'helm-apropos)
  (global-set-key (kbd "<f5> s")                       'helm-find)
  (global-set-key (kbd "<f2>")                         'helm-execute-kmacro)
  (global-set-key (kbd "C-c g")                        'helm-gid)
  (global-set-key (kbd "C-c i")                        'helm-imenu-in-all-buffers)
  (define-key global-map [remap jump-to-register]      'helm-register)
  (define-key global-map [remap list-buffers]          'helm-buffers-list)
  (define-key global-map [remap dabbrev-expand]        'helm-dabbrev)
  (define-key global-map [remap find-tag]              'helm-etags-select)
  (define-key global-map [remap xref-find-definitions] 'helm-etags-select)
  ;; make return do the right thing
  (add-hook 'helm-after-initialize-hook
            (lambda()
              ;; complete with enter
              ;; (see http://emacs.stackexchange.com/questions/3798/how-do-i-make-pressing-ret-in-helm-find-files-open-the-directory)
              (defun fu/helm-find-files-navigate-forward (orig-fun &rest args)
                (if (file-directory-p (helm-get-selection))
                    (apply orig-fun args)
                  (helm-maybe-exit-minibuffer)))
              (advice-add 'helm-execute-persistent-action :around #'fu/helm-find-files-navigate-forward)
              (define-key helm-find-files-map (kbd "<return>") 'helm-execute-persistent-action)
              ;; backspace deletes whole word
              (defun fu/helm-find-files-navigate-back (orig-fun &rest args)
                (if (= (length helm-pattern) (length (helm-find-files-initial-input)))
                    (helm-find-files-up-one-level 1)
                  (apply orig-fun args)))
              (advice-add 'helm-ff-delete-char-backward :around #'fu/helm-find-files-navigate-back)
              ;;; make C-d open dired buffer a-la ido-mode
              ;; first unset C-d
              (define-key helm-find-files-map (kbd "C-d") 'undefined)
              ;; function to open selection in dired
              (defun old-dired (&optional no-op)
                (dired (helm-get-selection)))
              ;; add to helm source 
              (helm-add-action-to-source "Fallback dired"
                                         'old-dired
                                         helm-source-find-files)
              ;; bind to C-d
              (define-key helm-find-files-map (kbd "C-d")
                (lambda () (interactive)
                  (helm-quit-and-execute-action 'old-dired)))
              (setq ;; fuzzy match
               helm-recentf-fuzzy-match t
               helm-buffers-fuzzy-matching t
               helm-locate-fuzzy-match t
               helm-M-x-fuzzy-match t
               helm-semantic-fuzzy-match t
               helm-imenu-fuzzy-match t
               helm-apropos-fuzzy-match t
               helm-lisp-fuzzy-completion t
               ;; ignore file case (doesn't seem to work, bug?)
               helm-case-fold-search t
               helm-read-file-name-case-fold-search t
               helm-file-name-case-fold-search t
               ;; always display in new buffer below
               helm-always-two-windows t
               ;; don't confuse me with extra instructions
               helm-display-header-line nil)
              ;; less dominating header
              (set-face-attribute 'helm-ff-dotted-directory nil
                                  :background nil
                                  :foreground "DimGray")
              (set-face-attribute 'helm-source-header nil
                                  :background "LightGray"
                                  :foreground "white"
                                  :family "Sans Serif"
                                  :height 0.9)
              ;; make helm window smaller
              (helm-autoresize-mode 1)
              (setq helm-autoresize-max-height 30 helm-autoresize-min-height 30)
              ;; learn my usage patterns
              ;; (helm-adaptive-mode 1) ;; doesn't really seem to work well
              ))

  ;;; Helm extras
  ;; describe active keybindings
  (require 'helm-descbinds)
  (helm-descbinds-mode)
  (require 'helm-bibtex)
#+END_SRC

*** Auto-complete configuration
:PROPERTIES:
:CUSTOM_ID: auto-complete-configuration
:END:
Here we configure in-buffer text completion using the company-mode package. These completions are available on-demand using the =C-TAB= or =M-x company-complete=.

#+BEGIN_SRC emacs-lisp
  ;;Use C-TAB to complete. We put this in eval-after-load 
  ;; because otherwise some modes will try to override our settings.
  (require 'company)
  ;; don't start automatically 
  (setq company-idle-delay nil)
  ;; cancel if input doesn't match
  (setq company-require-match nil)
  ;; complete using C-TAB
  (global-set-key (kbd "<C-tab>") 'company-complete)
  ;; use C-n and C-p to cycle through completions
  ;; (define-key company-mode-map (kbd "<tab>") 'company-complete)
  (define-key company-active-map (kbd "C-n") 'company-select-next)
  (define-key company-active-map (kbd "<tab>") 'company-complete-common)
  (define-key company-active-map (kbd "C-p") 'company-select-previous)
  (define-key company-active-map (kbd "<backtab>") 'company-select-previous)
  ;; enable math completions
  (require 'company-math)
  ;; company-mode completions for ess
  ;; (require 'company-ess)
  (add-to-list 'company-backends 'company-math-symbols-unicode)
  ;;(add-to-list 'company-backends 'company-math-symbols-latex)
  ;; put company-capf at the beginning of the list
  (require 'company-capf)
  (setq company-backends
        (delete-dups (cons 'company-capf company-backends)))
  ;; theme
  (set-face-attribute 'company-scrollbar-bg nil
                      :background "gray")
  (set-face-attribute 'company-scrollbar-fg nil
                      :background "black")
  (set-face-attribute 'company-tooltip nil
                      :foreground "black"
                      :background "lightgray")
  (set-face-attribute 'company-tooltip-selection nil
                      :foreground "white"
                      :background "steelblue")
  ;; ;; disable dabbrev
  ;; (delete 'company-dabbrev company-backends)
  ;; (delete 'company-dabbrev-code company-backends)


  (add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

*** Outline-magic
:PROPERTIES:
:CUSTOM_ID: outline-magic
:END:
I encourage you to use [[*Note taking and outlining (Org-mode)][org-mode]] for note taking and outlining, but it can be convenient to treat arbitrary buffers as outlines. The outline-magic mode can help with that.

#+BEGIN_SRC emacs-lisp
  ;;; Configure outline minor modes
  ;; Less crazy key bindings for outline-minor-mode
  (setq outline-minor-mode-prefix "\C-c\C-o")
  ;; load outline-magic along with outline-minor-mode
  (add-hook 'outline-minor-mode-hook 
            (lambda () 
              (require 'outline-magic)
              (define-key outline-minor-mode-map "\C-c\C-o\t" 'outline-cycle)))
#+END_SRC

*** Major modes configuration
:PROPERTIES:
:CUSTOM_ID: major-modes-configuration
:END:

**** Programming mode
:PROPERTIES:
:CUSTOM_ID: programming-mode
:END:
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook
            (lambda()
              ;; turn on outline minor mode:
              (add-hook 'prog-mode-hook 'outline-minor-mode)
               ;; make sure completion calls company-capf first
              (require 'company-capf)
              (set (make-local-variable 'company-backends)
                   (cons 'company-capf company-backends))
              (delete-dups company-backends)
              ))
#+END_SRC


**** General repl (read-eval-print-loop) config
:PROPERTIES:
:CUSTOM_ID: general-repl-config
:END:
Load eval-in-repl for bash, elisp, and python interaction.
#+BEGIN_SRC emacs-lisp
  ;; require the main file containing common functions
  (require 'eval-in-repl)
  (setq comint-process-echoes t)

  ;; truncate lines in comint buffers
  (add-hook 'comint-mode-hook
            (lambda()
              (setq truncate-lines 1)))
#+END_SRC

**** Run R in emacs (ESS)
:PROPERTIES:
:CUSTOM_ID: run-r-in-emacs
:END:

#+BEGIN_SRC emacs-lisp
    ;;;  ESS (Emacs Speaks Statistics)

  ;; Start R in the working directory by default
  (setq ess-ask-for-ess-directory nil)

  ;; Scroll down when R generates output
  (setq comint-scroll-to-bottom-on-input t)
  (setq comint-scroll-to-bottom-on-output t)
  (setq comint-move-point-for-output t)

  ;; Make sure ESS is loaded
  (require 'ess-site)

  ;; disable ehoing input
  (setq ess-eval-visibly nil)

  ;; extra ESS stuff inspired by https://github.com/gaborcsardi/dot-emacs/blob/master/.emacs
  (ess-toggle-underscore nil)

  (defun my-ess-execute-screen-options (foo)
    "cycle through windows whose major mode is inferior-ess-mode and fix width"
    (interactive)
    (setq my-windows-list (window-list))
      (while my-windows-list
        (when (with-selected-window (car my-windows-list) (string= "inferior-ess-mode" major-mode))
          (with-selected-window (car my-windows-list) (ess-execute-screen-options t)))
        (setq my-windows-list (cdr my-windows-list))))

  (add-to-list 'window-size-change-functions 'my-ess-execute-screen-options)

  ;; truncate long lines in R source files
  (add-hook 'ess-mode-hook
            (lambda()
              ;; don't wrap long lines
              (setq truncate-lines 1)
              ;; better (but still not right) indentation
              ;(setq ess-first-continued-statement-offset 2)
              ;(setq ess-continued-statement-offset 0)
              ;(setq ess-arg-function-offset nil)
              ;(setq ess-arg-function-offset-new-line nil)
              ;(setq ess-expression-offset nil)

              ;; ;; put company-capf at the front of the completion sources list
              ;; (set (make-local-variable 'company-backends)
              ;;      (cons 'company-capf company-backends))
              ;; (delete-dups company-backends)
              ))
#+END_SRC

**** Run python in emacs (elpy)
:PROPERTIES:
:CUSTOM_ID: run-python-in-emacs
:END:

#+BEGIN_SRC emacs-lisp
  ;; Python completion and code checking
  (setq elpy-modules '(elpy-module-company
                       elpy-module-eldoc
                       elpy-module-flymake
                       elpy-module-pyvenv
                       elpy-module-highlight-indentation
                       elpy-module-sane-defaults))
  (elpy-enable)
  ;; use ipython if available
  (if (executable-find "ipython")
      (elpy-use-ipython))

  ;; make sure completions don't start automatically
  (add-hook 'elpy-mode-hook
             (lambda ()
  ;;              (require 'eval-in-repl-python)
  ;;              (define-key elpy-mode-map "\C-c\C-c" 'eir-eval-in-python)
                (setq company-idle-delay nil)))

  ;; fix printing issue in python buffers
  ;; see http://debbugs.gnu.org/cgi/bugreport.cgi?bug=21077
  (setq python-shell-enable-font-lock nil)

#+END_SRC

**** emacs lisp REPL (ielm)
:PROPERTIES:
:CUSTOM_ID: emacs-lisp-repl
:END:

#+BEGIN_SRC emacs-lisp
  ;; ielm
  (require 'eval-in-repl-ielm)
  ;; For .el files
  (define-key emacs-lisp-mode-map "\C-c\C-c" 'eir-eval-in-ielm)
  ;; For *scratch*
  (define-key lisp-interaction-mode-map "\C-c\C-c" 'eir-eval-in-ielm)
  ;; For M-x info
  (define-key Info-mode-map "\C-c\C-c" 'eir-eval-in-ielm)

  ;; Set up completions
  (add-hook 'emacs-lisp-mode-hook
            (lambda()
               ;; make sure completion calls company-elisp first
               (require 'company-elisp)
               (set (make-local-variable 'company-backends)
                    (cons 'company-elisp company-backends))
               (delete-dups company-backends)
               ))
#+END_SRC

**** Light-weight markup language (Markdown mode)
:PROPERTIES:
:CUSTOM_ID: light-weight-markup-language
:END:

#+BEGIN_SRC emacs-lisp

  ;;; markdown mode

  ;; Use markdown-mode for files with .markdown or .md extensions
  (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

#+END_SRC

**** Typesetting markup (AucTeX)
:PROPERTIES:
:CUSTOM_ID: typesetting-markup
:END:

#+BEGIN_SRC emacs-lisp

  ;;; AucTeX config
  ;; turn on math mode and and index to imenu
  (add-hook 'LaTeX-mode-hook 
            (lambda ()
               (turn-on-reftex)
               (TeX-PDF-mode t)
               (LaTeX-math-mode)
               (TeX-source-correlate-mode t)
               (imenu-add-to-menubar "Index")
               (outline-minor-mode)
               ;; completion
               (setq-local company-backends
                           (delete-dups (cons 'company-files
                                              company-backends)))
               (setq-local company-backends
                           (delete-dups (cons '(company-math-symbols-latex company-latex-commands company-math-symbols-unicode)
                                              company-backends)))
               ;; Allow paragraph filling in tables
               (setq LaTeX-indent-environment-list
                     (delq (assoc "table" LaTeX-indent-environment-list)
                           LaTeX-indent-environment-list))
               (setq LaTeX-indent-environment-list
                     (delq (assoc "table*" LaTeX-indent-environment-list)
                           LaTeX-indent-environment-list))))
  ;; Misc. latex settings
  (setq TeX-parse-self t
        TeX-auto-save t)
  (setq-default TeX-master nil)
  ;; Add beamer frames to outline list
  (setq TeX-outline-extra
        '((".*\\\\begin{frame}\n\\|.*\\\\begin{frame}\\[.*\\]\\|.*\\\\begin{frame}.*{.*}\\|.*[       ]*\\\\frametitle\\b" 3)))
  ;; reftex settings
  (setq reftex-enable-partial-scans t)
  (setq reftex-save-parse-info t)
  (setq reftex-use-multiple-selection-buffers t)
  (setq reftex-plug-into-AUCTeX t)
  (add-hook 'bibtex-mode-hook
            (lambda ()
               (define-key bibtex-mode-map "\M-q" 'bibtex-fill-entry)))

  ;; enable latexmk
  (require 'auctex-latexmk)
  (auctex-latexmk-setup)
  ;; make latexmk the default
  (add-hook 'TeX-mode-hook '(lambda () (setq TeX-command-default "LatexMk")))
  ;; bad hack to give pdf by default
  (unless (file-exists-p "~/.latexmkrc")
      (write-region "# compile to pdf\n$pdf_mode = 1;\n" nil "~/.latexmkrc"))

#+END_SRC

**** Note taking and outlining (Org-mode)
:PROPERTIES:
:CUSTOM_ID: note-taking-and-outlining
:END:

#+BEGIN_SRC emacs-lisp
  (require 'org)
  (setq org-export-babel-evaluate nil)
  (set-face-attribute 'org-meta-line nil
                      :background nil
                      :foreground "#B0B0B0")
  (setq org-startup-indented t)
  ;; increase imenu depth to include third level headings
  (setq org-imenu-depth 3)
  ;; Set sensible mode for editing dot files
  (add-to-list 'org-src-lang-modes '("dot" . graphviz-dot))

  ;; Update images from babel code blocks automatically
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
  ;; configure org-mode when opening first org-mode file
  (add-hook 'org-mode-hook
            (lambda()
              (define-key org-mode-map (kbd "<C-tab>") 'company-complete)
              ;; Load additional export formats
              (require 'ox-odt)
              (require 'ox-md)
              (require 'ox-freemind)
              (require 'ox-bibtex)
              ;; Enable common programming language support in org-mode
              (org-babel-do-load-languages
               'org-babel-load-languages
               '((R . t)
                 (python . t)
                 (matlab . t)
                 (emacs-lisp . t)
                 (sh . t)
                 (dot . t)
                 (latex . t)
                 (octave . t)
                 (ditaa . t)
                 (org . t)
                 (perl . t)
                 (julia . t)
                 ))
              ;; Fontify code blocks in org-mode
              (setq org-src-fontify-natively t)
              (setq org-src-tab-acts-natively t)
              (setq org-confirm-babel-evaluate nil)
              (require 'org-capture)
              (require 'org-protocol)
              (require 'ob-stata)
              (when (executable-find "ipython")
                (setq org-babel-python-command
                      "ipython --pylab --pdb --nosep --classic --no-banner --no-confirm-exit")
                ;; https://github.com/jorgenschaefer/elpy/issues/191
                ;; https://lists.gnu.org/archive/html/emacs-orgmode/2014-03/msg00405.html
                ;; make IPython work w/ Org
                (defadvice org-babel-python-evaluate
                    (around org-python-use-cpaste
                            (session body &optional result-type result-params preamble) activate)
                  "Add a %cpaste and '--' to the body, so that ipython does the right thing."
                  (setq body (concat "%cpaste -q\n" body "\n--\n"))
                  ad-do-it
                  (if (stringp ad-return-value)
                      (setq ad-return-value
                            (replace-regexp-in-string
                             "\\(^Pasting code; enter '--' alone on the line to stop or use Ctrl-D\.[\r\n]:*\\)"
                             ""
                             ad-return-value)))))))

#+END_SRC


**** Multiple modes in one "buffer" (polymode)
:PROPERTIES:
:CUSTOM_ID: multiple-modes-in-one-buffer
:END:

#+BEGIN_SRC emacs-lisp

  ;;; polymode

  ;; polymode requires emacs >= 24.3, does not work on the RCE. 
  (when (>= (string-to-number 
             (concat 
              (number-to-string emacs-major-version) 
              "." 
              (number-to-string emacs-minor-version)))
            24.3)
    ;; Activate polymode for files with the .md extension
    (add-to-list 'auto-mode-alist '("\\.md" . poly-markdown-mode))
    ;; Activate polymode for R related modes
    (add-to-list 'auto-mode-alist '("\\.Snw" . poly-noweb+r-mode))
    (add-to-list 'auto-mode-alist '("\\.Rnw" . poly-noweb+r-mode))
    (add-to-list 'auto-mode-alist '("\\.Rmd" . poly-markdown+r-mode))
    (add-to-list 'auto-mode-alist '("\\.rapport" . poly-rapport-mode))
    (add-to-list 'auto-mode-alist '("\\.Rhtml" . poly-html+r-mode))
    (add-to-list 'auto-mode-alist '("\\.Rbrew" . poly-brew+r-mode))
    (add-to-list 'auto-mode-alist '("\\.Rcpp" . poly-r+c++-mode))
    (add-to-list 'auto-mode-alist '("\\.cppR" . poly-c++r-mode)))

#+END_SRC

**** File browsing (Dired+)
:PROPERTIES:
:CUSTOM_ID: file-browsing
:END:
#+BEGIN_SRC emacs-lisp
    ;;; Dired and Dired+ configuration
    ;; show git status in dired
    (require 'diff-hl)
    (add-hook 'dired-mode-hook 
              (lambda()
                (diff-hl-dired-mode)
                (diff-hl-margin-mode)))

    ;; show details by default
    (setq diredp-hide-details-initially-flag nil)
    ;; load dired+ and mouse3
    (require 'dired+)
    (require 'mouse3)

    ;; set dired listing options
    (if (eq system-type 'gnu/linux)
        (setq dired-listing-switches "-alDhp"))

    ;; more subdued colors
    (set-face-attribute 'diredp-ignored-file-name nil
                        :foreground "LightGray"
                        :background nil)
    (set-face-attribute 'diredp-read-priv nil
                        :foreground "LightGray"
                        :background nil)
    (set-face-attribute 'diredp-write-priv nil
                        :foreground "LightGray"
                        :background nil)
    (set-face-attribute 'diredp-other-priv nil
                        :foreground "LightGray"
                        :background nil)
    (set-face-attribute 'diredp-rare-priv nil
                        :foreground "LightGray"
                        :background nil)
    (set-face-attribute 'diredp-no-priv nil
                        :foreground "LightGray"
                        :background nil)
    (set-face-attribute 'diredp-exec-priv nil
                        :foreground "LightGray"
                        :background nil)
    (set-face-attribute 'diredp-file-name nil
                        :weight 'bold
                        :background nil)
    (set-face-attribute 'diredp-dir-priv nil
                        :weight 'bold)
    (set-face-attribute 'diredp-file-suffix nil
                        :foreground nil)
                        
    ;; make sure dired buffers end in a slash so we can identify them easily
    (defun ensure-buffer-name-ends-in-slash ()
      "change buffer name to end with slash"
      (let ((name (buffer-name)))
        (if (not (string-match "/$" name))
            (rename-buffer (concat name "/") t))))
    (add-hook 'dired-mode-hook 'ensure-buffer-name-ends-in-slash)
    (add-hook 'dired-mode-hook
              (lambda()
                 (setq truncate-lines 1)))

    ;; open files in external programs
    ;; (from http://ergoemacs.org/emacs/emacs_dired_open_file_in_ext_apps.html
    (defun xah-open-in-external-app (&optional file)
      "Open the current file or dired marked files in external app.

    The app is chosen from your OS's preference."
      (interactive)
      (let (doIt
            (myFileList
             (cond
              ((string-equal major-mode "dired-mode")
               (dired-get-marked-files))
              ((not file) (list (buffer-file-name)))
              (file (list file)))))
        (setq doIt (if (<= (length myFileList) 5)
                       t
                     (y-or-n-p "Open more than 5 files? "))) 
        (when doIt
          (cond
           ((string-equal system-type "windows-nt")
            (mapc
             (lambda (fPath)
               (w32-shell-execute "open" (replace-regexp-in-string "/" "\\" fPath t t)))
             myFileList))
           ((string-equal system-type "darwin")
            (mapc
             (lambda (fPath)
               (shell-command (format "open \"%s\"" fPath)))
             myFileList))
           ((string-equal system-type "gnu/linux")
            (mapc
             (lambda (fPath)
               (let ((process-connection-type nil))
                 (start-process "" nil "xdg-open" fPath))) myFileList))))))
    ;; open files from dired with "E"
    (define-key dired-mode-map (kbd "E") 'xah-open-in-external-app)
    ;; use zip/unzip to compress/uncompress zip archives
    (eval-after-load "dired-aux"
     '(add-to-list 'dired-compress-file-suffixes 
                   '("\\.zip\\'" "" "unzip")))

#+END_SRC

**** Shell modes (term, shell and eshell)
:PROPERTIES:
:CUSTOM_ID: shell-modes
:END:

#+BEGIN_SRC emacs-lisp
  ;; term
  (require 'multi-term)
  (define-key term-mode-map (kbd "C-j") 'term-char-mode)
  (define-key term-raw-map (kbd "C-j") 'term-line-mode)
  ;; shell
  (require 'essh) ; if not done elsewhere; essh is in the local lisp folder
  (require 'eval-in-repl-shell)
  (add-hook 'sh-mode-hook
            (lambda()
               (local-set-key "\C-c\C-c" 'eir-eval-in-shell)))


  ;; Automatically adjust output width in commint buffers
  ;; from http://stackoverflow.com/questions/7987494/emacs-shell-mode-display-is-too-wide-after-splitting-window
  (defun comint-fix-window-size ()
    "Change process window size."
    (when (derived-mode-p 'comint-mode)
      (let ((process (get-buffer-process (current-buffer))))
        (unless (eq nil process)
          (set-process-window-size process (window-height) (window-width))))))

  (defun my-shell-mode-hook ()
    ;; add this hook as buffer local, so it runs once per window.
    (add-hook 'window-configuration-change-hook 'comint-fix-window-size nil t))
    ;; auto-complete for shell-mode (linux only)
  (if (eq system-type 'gnu/linux)
      (progn 
        (setq explicit-shell-file-name "bash")
        (setq explicit-bash-args '("-c" "-t" "export EMACS=; stty echo; bash"))  
        (ansi-color-for-comint-mode-on)
        (add-hook 'shell-mode-hook
            (lambda()
               ;; make sure completion calls company-readline first
               (require 'readline-complete)
               (set (make-local-variable 'company-backends)
                    (cons 'company-readline company-backends))
               (delete-dups company-backends)
               ))
        (add-hook 'rlc-no-readline-hook (lambda () (company-mode -1)))))

  (add-hook 'shell-mode-hook
            (lambda()
               ;; add this hook as buffer local, so it runs once per window.
               (add-hook 'window-configuration-change-hook 'comint-fix-window-size nil t)))

  ;; extra completion for eshell
  (add-hook 'eshell-mode-hook
            (lambda()
               (require 'pcmpl-args)
               (require 'pcmpl-pip)
               ;; programs that don't work well in eshell and should be run in visual mode
               (add-to-list 'eshell-visual-commands "ssh")
               (add-to-list 'eshell-visual-commands "tail")
               (add-to-list 'eshell-visual-commands "htop")
               (setq eshell-visual-subcommands '(("git" "log" "diff" "show")))))


#+END_SRC


*** Miscellaneous
:PROPERTIES:
:CUSTOM_ID: miscellaneous
:END:

#+BEGIN_SRC emacs-lisp

  ;;; Misc. Conveniences

  ;; show number of matches in mode line when searching
  (global-anzu-mode +1)

  ;; get help from the web
  (require 'google-this)
  (google-this-mode 1)
  (require 'howdoi)

  ;; window arrangement history
  ;; (setq winner-dont-bind-my-keys t) 
  (winner-mode 1)

    ;;; set up unicode
  (prefer-coding-system       'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (setq buffer-file-coding-system 'utf-8)                      
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))

  ;; ;; use regex search by default
  ;; (global-set-key (kbd "C-s") 'isearch-forward-regexp)
  ;; (global-set-key (kbd "C-r") 'isearch-backward-regexp)

  ;; Use spaces for indentation
  (setq-default indent-tabs-mode nil)

  ;; Make sure copy-and-paste works with other programs
  ;; (not needed in recent emacs?)
  ;; (setq x-select-enable-clipboard t
  ;;       x-select-enable-primary t
  ;;       save-interprogram-paste-before-kill t)

  ;; Text pasted with mouse should be inserted at cursor position
  (setq mouse-yank-at-point t)

  ;; Mouse scrolling behavior
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse

  ;; from https://github.com/bbatsov/prelude
  ;; store all backup and autosave files in the tmp dir
  (setq backup-directory-alist
  `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
  `((".*" ,temporary-file-directory t)))
  ;; autosave the undo-tree history
  (setq undo-tree-history-directory-alist
  `((".*" . ,temporary-file-directory)))
  (setq undo-tree-auto-save-history t)

  ;; Apropos commands should search everything
  (setq apropos-do-all t)

  ;; Store the places file in the emacs user directory
  (setq save-place-file (concat user-emacs-directory "places"))


  ;; better naming of duplicate buffers
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)

  ;; put cursor in last used position when re-opening file
  (require 'saveplace)
  (setq-default save-place t)

  ;; Use y/n instead of yes/no
  (fset 'yes-or-no-p 'y-or-n-p)

  (transient-mark-mode 1) ; makes the region visible
  (line-number-mode 1)    ; makes the line number show up
  (column-number-mode 1)  ; makes the column number show up

  (show-paren-mode 1) ;; highlight matching paren

  ;; smooth scrolling with C-up/C-down
  (require 'smooth-scroll)
  (smooth-scroll-mode)
  (global-set-key [(control down)] 'scroll-up-1)
  (global-set-key [(control up)] 'scroll-down-1)
  (global-set-key [(control left)] 'scroll-right-1)
  (global-set-key [(control right)] 'scroll-left-1)

  ;; enable toggling paragraph un-fill
  ;; from http://www.emacswiki.org/emacs/UnfillParagraph
  (defun unfill-paragraph ()
    "Takes a multi-line paragraph and makes it into a single line of text."
    (interactive)
    (let ((fill-column (point-max)))
      (fill-paragraph nil)))

  (define-key global-map "\M-Q" 'unfill-paragraph)

  ;; line wrapping
  (setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
  (add-hook 'text-mode-hook 'visual-line-mode 1)
  (add-hook 'prog-mode-hook
            (lambda()
              (setq truncate-lines 1)))

  ;; don't require two spaces for sentence end.
  (setq sentence-end-double-space nil)

  ;; Use CUA mode only for handy rectangle features
  (cua-selection-mode t)

  ;; use windresize for changing window size
  (require 'windresize)

  ;; use windmove for navigating windows
  (global-set-key (kbd "<M-S-left>")  'windmove-left)
  (global-set-key (kbd "<M-S-right>") 'windmove-right)
  (global-set-key (kbd "<M-S-up>")    'windmove-up)
  (global-set-key (kbd "<M-S-down>")  'windmove-down)
  ;; The beeping can be annoying--turn it off
  (set-variable 'visible-bell t)

  ;; save settings made using the customize interface to a sparate file
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (unless (file-exists-p custom-file)
    (write-region ";; Put user configuration here" nil custom-file))
  (load custom-file 'noerror)

  ;; ;; clean up the mode line
  (require 'diminish)
  ;; (diminish 'company-mode)
  (diminish 'anzu-mode)
  (diminish 'google-this-mode)
  (diminish 'outline-minor-mode)
  (diminish 'smooth-scroll-mode)

#+END_SRC


* Footnotes

[fn:1] See ticket [[https://help.hmdc.harvard.edu/Ticket/Display.html?id=179621][179621]].

