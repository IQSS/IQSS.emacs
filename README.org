#+AUTHOR:  Ista Zahn
#+TITLE: Requirements for a sane emacs config for social scientists

* Quick start

** What is this?
This is a drop-in replacement for your .emacs.d. It automatically installs and configures several emacs packages useful for working with LaTeX documents, and for writing code for statistical analysis in R, Stata, SAS, and Julia. It also turns on several built-in features of emacs such as spell checking and syntax highlighting.

** How to I install it?
1) Make sure emacs >= version 24.3 is installed on your computer. See  [[#Suggested-external-programs][Suggested-external-programs]] for installation instructions.
2) Make sure you have [[http://git-scm.com/downloads][git]] installed on your computer. If you don't know what git is you might be interested in John McDonnell's [[http://nyuccl.org/pages/GitTutorial/][git tutorial]].
3) Determine your emacs configuration directory. Open emacs and type =C-x f ~/ RET=. This should open a directory listing buffer. Note the path at the top of this file. This is were your =.emacs.d= should go.
4) Close Emacs.
6) Back up your existing =~/.emacs= file and =~/.emacs.d= directory (e.g., rename =.emacs= to =OLD.emacs= and rename =.emacs.d= to =OLD.emacs.d=).
6) Clone this repository into =~/.emacs.d= by opening a terminal and running =git clone http://github.com/izahn/dotemacs ~/.emacs.d=.

If you don't know how to use git, you can skip step 6 and simply [[https://github.com/izahn/dotemacs/archive/master.zip][download the files as a zip archive]], extract them, and move them into your .emacs.d directory.

** First run
Note that after installing this configuration emacs will be extremely slow to start up the first time. This is due to a one-time scan of the fonts installed on your computer. Just be patient and wait for it to finish--subsequent start-ups will be much faster.

** Modified key bindings
This package adds a few new or modified key bindings to emacs, as described below.

*** Completion keys
- C-TAB :: Mapped to =company-complete=, use for pop-up completion menu.
- M-y :: Remapped to =kill-ring-ido= to browse the kill ring interactively.
- C-x C-r :: Mapped to =ido-recentf-open= to select recent files in the minibuffer.
- M-x :: Remapped to =smex= to interactively search for interactive functions. Use =M-X= to restrict to commands for the active major mode.

*** Other key bindings
- E :: Open in external application (dired mode only)
- C-up :: Mapped to =scroll-down-1=.
- C-down :: Mapped to =scroll-up-1=.
- C-c C-c :: Mapped to functions that execute code in several major modes, including shell mode, python mode, ielm mode, lisp-interaction mode, and ess mode.
- M-Q :: Mapped to =unfill-paragraph=, use to remove line breaks from a paragraph.
- C-c C-o t :: Mapped to =outline-cycle=, use to hide/show when outline-minor-mode is active (outline-minor mode is enabled in programming modes and in LaTeX-mode).
- M-q :: Remapped to =bibtex-fill-entry= (bibtex mode only).


** Suggested external programs
  :PROPERTIES:
  :CUSTOM_ID: Suggested-external-programs
  :END:

Some of the requirements listed in [[#Requirements][Requirements]] make use of software that must be installed outside of emacs. And of course you will need emacs itself! 

*** External program download and installation
While emacs alone is very powerful, one of it's most important strengths is its ability to inter-operate with other software programs. Links to the download pages for several programs that can be used from with emacs are provided below (they are also very useful on their own!). Installation of all these programs follows normal conventions on each platform, just download, run the installer, and follow the instructions.

**** Windows
- Emacs :: http://vgoulet.act.ulaval.ca/en/emacs/
- R :: http://cran.r-project.org/bin/windows/base/
- LaTeX :: http://miktex.org/download
- git :: http://git-scm.com/download/win
- Pandoc :: https://github.com/jgm/pandoc/releases
- GhostScript :: http://www.ghostscript.com/download/gsdnld.html

**** OSX
- Emacs :: http://vgoulet.act.ulaval.ca/en/emacs/
- R :: http://cran.r-project.org/bin/macosx/
- LaTeX :: http://tug.org/mactex/
- git :: http://git-scm.com/download/mac
- Pandoc :: https://github.com/jgm/pandoc/releases
- GhostScript :: http://pages.uoregon.edu/koch/

**** Linux
- Emacs :: Use your package manager, or see http://www.gnu.org/software/emacs/#Obtaining
- R :: Use your package manager, or see http://cran.r-project.org/bin/linux/
- LaTeX :: Use your package manager, or see https://www.tug.org/texlive/quickinstall.html
- git :: Use your package manager, or see http://git-scm.com/download/linux
- Pandoc :: Use your package manager, or see http://johnmacfarlane.net/pandoc/installing.html#all-platforms
- GhostScript :: Use your package manager, or see http://www.ghostscript.com/download/gsdnld.html

*** External program configuration and use
While a detailed instructions on how to use these programs would take years, you can get started with the quickly. Here are some quick pointers and links to more detailed tutorials.

**** Emacs
Emacs configuration is complex, and we will not go into it here except to say that the main configuration file is named =init.el= and can usually be found in a directory named =.emacs.d=, which is usually in your home directory. As mentioned in [[#Quickstart]] and  [[#Discussion-and-implementation]] there are many pre-packaged emacs configurations that you can use simply by copying them to your =.emacs.d= directory.

You can almost just start emacs and start typing as you would in any other text editor, though you should be aware that Emacs uses different keyboard shortcuts than those you may be accustomed to. There is a introductory tutorial built into Emacs that you can access from the Help menu; IBM provides another excellent [[http://www.ibm.com/developerworks/aix/tutorials/au-emacs1/index.html][emacs tutorial]].

**** R
R is a free language and environment for statistical computing. It works well out of the box and does not require much in the way of configuration. If you want to learn more about R the [[http://r-project.org][official R website]] is a good place to start and includes many excellent [[http://cran.r-project.org/manuals.html][manuals]] and [[http://cran.r-project.org/other-docs.html][tutorials]].

**** LaTeX
LaTeX is a typesetting system that excels at formatting structured documents. LaTeX files are written in plain text using a markup syntax, and this markup is used to format the typeset document. LaTeX works well out of the box and does not typically require much in the way of configuration. If you want to learn more about LaTeX try [[http://www.andy-roberts.net/writing/latex][these LaTeX tutorials]] by Andrew Roberts.

**** git
git is a revision control system that allows you to track changes, merge changes with those made by collaborators, revert to previous versions, and more. While git can be used without any configuration, it is a good idea to at least set your user name and email; instructions for doing so are available at [[http://git-scm.com/book/en/Getting-Started-First-Time-Git-Setup]]; a detailed introduction to git is available at [[http://git-scm.com/book/en/]]

It is often convenient to tell git /not/ to track some types of files (e.g., temporary files, or large binary files). LaTeX users in particular may be annoyed that git tries to track their .aux, .log, and other ephemeral files produced by LaTeX. You can tell git to ignore certain types of files by listing the in a .gitignore file. Details on .gitignore files are available at [[http://git-scm.com/docs/gitignore]], and many useful templates (including one designed for LaTeX users) are available at [[https://github.com/github/gitignore]].

**** Pandoc
Pandoc is a program for converting markup files from one markup language to another. Documentation and examples are available on the [[http://johnmacfarlane.net/pandoc/][pandoc website]].

**** GhostScript
GhostScript is a program for working the postscript and pdf files. While it can be used on its own it is included in this list only because it makes printing from emacs easier, especially on Windows. No configuration should be required.

* Discussion and implementation

** What the world needs now...
As of August 5th 2014 there are 2,960 github repositories named or mentioning '.emacs.d', and another 627 named or mentioning "dotemacs". Some of these are just personal emacs configurations, but many take pains to provide documentation and instruction for adopting them as your very own emacs configuration. And that's not to mention the [[https://github.com/search?q=emacs-starter-kit&type=Repositories&ref=searchresults][starter-kits]], [[https://github.com/search?q=emacs+prelude&type=Repositories&ref=searchresults][preludes]] and [[https://github.com/search?q=emacs+oh+my&type=Repositories&ref=searchresults][oh my emacs]] of the world! With all these options, does the world really need yet another emacs configuration? 

No, the world does not need another emacs starter kit. Indeed the guy who started the original emacs starter-kit has concluded that the whole idea is [[https://github.com/technomancy/emacs-starter-kit][unworkable]], and that if you want to use emacs you're better off configuring it yourself. I agree, and it's not that hard, even if you don't know emacs-lisp at all. You can copy code fragments from others' configuration on [[http://github.com][github]], from the [[http://emacswiki.org][emacs wiki]], or from [[http://stackoverflow.com][stackoverflow]] and build up your very own emacs configuration. And eventually it will be so perfect you will think "gee I could save people the trouble of configuring emacs, if they would just clone my configuration". So you will put it on github, like everyone else (including me). Sigh.

** Requirements
  :PROPERTIES:
  :CUSTOM_ID: Requirements
  :END:

Emacs is many things to many people, being perhaps the most configurable text editor ever created. However, there are some common tools that social scientists often make use of that are not accessible in emacs by default. It is therefore desirable to create a base configuration that enables the features that social scientists are likely to find useful. The table below lists some of these requirements, and describes how they can be made available in emacs.
 

| Requirement                 | Categories         | Requester  | Solution           | Notes                                                     |
|-----------------------------+--------------------+------------+--------------------+-----------------------------------------------------------|
| LaTeX editing/compilation   | Document prep      | Gary[fn:1] | AucTeX/RefTeX      | Installed and turned on                                   |
| Font locking                | Look-n-feel        | Gary       | font-lock-mode     | Built-in, turned on                                       |
| Spell checking              | Convenience        | Gary       | ispell/flyspell    | Built-in, turned on                                       |
| Outline/structure editing   | Convenience        | Gary       | outline-minor-mode | Built-in, turned on                                       |
| Revision control            | Version management | Gary       | VC-mode            | Built-in, turned on                                       |
| Edit/evaluate R/Stata/SAS   | Data analysis      | Ista       | ESS                | Installed and activated                                   |
| Easier file/buffer/access   | Convenience        | Ista       | ido                | Installed, turned on                                      |
| Reproducible research       | Data analysis      | Ista       | org-mode, polymode | Installed, polymode (Melpa) not working on RCE            |
| Copy/paste with other apps  | Convenience        | Ista       | x-select           | Built-in, turned on                                       |
| Word wrapping               | Look-n-feel        | Ista       | visual-line-mode   | Built-in, turned on                                       |
|                             |                    |            |                    |                                                           |

It will be hard to avoid the temptation for feature-creep; every emacs user has certain things they really like, but we don't want this to turn into a super-set of all the things that anyone likes. The table below list some things that would be nice to have but are controversial, trivial,  or not widely used.

| Requirement                        | Categories  | Requester | Solution               | Notes                                            |
|------------------------------------+-------------+-----------+------------------------+--------------------------------------------------|
| Command hinting/completion         | Convenience | Ista      | smex                   | Installed and turned on                          |
| Programming auto-completion        | Convenience | Ista      | auto-complete/Company  | Installed and turned on                          |
| Keep backup files out of the way   | Convenience | Ista      | backup-directory-alist | Built-in, turned on                              |
| Quieter startup                    | Look-n-feel | Ista      | inhibit-startup*       | Built-in, off by default                         |
| Cleaner interface                  | Look-n-feel | Ista      | tool-bar-mode          | Built-in, off by default                         |
| Highlight matched/mismatched paren | Convenience | Ista      | show-paren-mode        | Built-in, turned on                              |


** Implementation options
  :PROPERTIES:
  :CUSTOM_ID: Implementation-options
  :END:
Implementation of the requirements listed in the previous section can be approached from a few different starting places. 
1) We can start from the default emacs and add the required functionality.
2) We can start from a meta-package (probably http://kieranhealy.org/resources/emacs-starter-kit/ but other options exist) and (optionally) remove things we don't need.
3) We can start with specialized emacs distributions for different operating systems and add required functionality.

In my experience option 1 (building up from default Gnu emacs) works well on Linux, so-so on Mac, and is a real pain on Windows. Option 2 (the meta-package approach) tends to result in un-maintainable, complicated configurations that the user doesn't understand and can't configure. Therefore I suggest that we encourage people to start with OS-specific emacs distributions, and that we write relatively minimal config files that sets up the basics, along with documentation and comments explaining how to add related functionality. See [[#Cross-platform-issues][Cross platform issues]] for recommended emacs versions for Windows and OS X.


** Cross-platform issues
  :PROPERTIES:
  :CUSTOM_ID: Cross-platform-issues
  :END:

Ideally emacs configuration will "just work" regardless of the operating system (Windows, OSX, Linux, etc.) emacs is running on. In practice there are some tweaks required to get things working on Mac, and especially, Windows. These platform-specific issues can be largely avoided by starting with platform-specific versions of emacs.

- Emacs for Windows :: http://vgoulet.act.ulaval.ca/en/emacs/
- Emacs for OS X :: http://vgoulet.act.ulaval.ca/en/emacs/
- Emacs for Linux :: Use your package manager, or see http://www.gnu.org/software/emacs/

Note for Linux users: Emacs version $\geq$ 24 is required. If your Linux distro ships old and busted emacs you need to figure out how to install a recent version.


** Implementation
  :PROPERTIES:
  :CUSTOM_ID: Implementation
  :END:

The emacs configuration in the sections below implements the [[#Requirements][Requirements]] listed above.


*** Preamble

#+BEGIN_SRC emacs-lisp :tangle init.el
  ;;; COMMENTARY

  ;; This emacs configuration file sets some convenient defaults and activates 
  ;; emacs functionality useful to social scientists. 


  ;; NOTE FOR RCE USERS: RCE Emacs has some strange system configuration
  ;; settings. To use this init file on the RCE you need to start emacs with
  ;; emacs --no-site-file --no-site-lisp. This is a temporary requirement that
  ;; will eventually be resolved in cooperation with the RCE team.
#+END_SRC

*** version Check
It is difficult to support multiple versions of emacs, so we will pick an arbitrary cutoff and throw an error if the version of emacs is "too old".

#+BEGIN_SRC emacs-lisp :tangle init.el
  (when (< (string-to-number 
             (concat 
              (number-to-string emacs-major-version) 
              "." 
              (number-to-string emacs-minor-version)))
            24.2)
    (error "Your version of emacs is very old and must be upgraded before you can use these packages"))
#+END_SRC

*** Visual tweaks
Visual changes such as hiding the toolbar need to come first to avoid jarring transitions during startup.

#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; hide the toolbar
  (tool-bar-mode 0)
  ; (menu-bar-mode 0)
  (setq inhibit-splash-screen t)
  (setq inhibit-startup-message t)
#+END_SRC

*** Install useful packages
The main purpose of these emacs configuration files is to install and configure useful emacs packages. Here we carry out the installation.

#+BEGIN_SRC emacs-lisp :tangle init.el

  ;;; Install required packages
  (require 'cl)

  ;; load site-start early so we can override it later
  (load "default" t t)
  ;; prevent site-start from running again later
  (setq inhibit-default-init t)

  ;; load the package manager
  (require 'package)

  ;; Add additional package sources
  (add-to-list 'package-archives 
               '("org" . "http://orgmode.org/elpa/") t)
  (add-to-list 'package-archives 
               '("melpa" . "http://melpa.milkbox.net/packages/") t)

  ;; Make a list of the packages you want
  (setq my-package-list '(;; gnu packages
                          auctex
                          ;; melpa packages
                          leuven-theme
                          powerline
                          persistent-soft
                          unicode-fonts
                          dired+
                          mouse3
                          ido-ubiquitous
                          ido-vertical-mode
                          noflet
                          kill-ring-ido
                          smex
                          outline-magic
                          smooth-scroll
                          company
                          company-math
                          ess
                          markdown-mode
                          polymode
                          eval-in-repl
                          elpy
                          htmlize
                          pcmpl-args
                          pcmpl-pip
                          readline-complete
                          magit
                          ;; org-mode packages
                          org-plus-contrib))

  ;; Activate package autoloads
  (package-initialize)

  ;; make sure stale packages don't get loaded
  (dolist (package my-package-list)
    (if (featurep package)
        (unload-feature package t)))
  ;; Install packages in package-list if they are not already installed
  (unless (every #'package-installed-p my-package-list)
    (switch-to-buffer "*scratch*")
    (erase-buffer)
    (setq my-this-buffer (buffer-name))
    (delete-other-windows)
    (insert "Please wait while emacs configures itself...")
    (redisplay t)
    (redisplay t)
    (package-refresh-contents)
    (dolist (package my-package-list)
      (when (not (package-installed-p package))
        (package-install package)))
    (switch-to-buffer "*scratch*")
    (erase-buffer)
    (delete-other-windows)
    (insert 
     ";; Your emacs has been configured for maximum productivity. 
  ;; For best results please restart emacs now.

  ;; More information about this emacs configuration be found
  ;; at http://github.com/izahn/dotemacs. If you have any problems
  ;; or have a feature request please open a bug report at
  ;; http://github.com/izahn/dotemacs/issues
  "
     ))
#+END_SRC

#+RESULTS:

*** Load theme
Loading the theme should come as early as possible in the init sequence to avoid jarring visual changes during startup, but must come after loading packages because we use a custom theme that needs to be installed first.

#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; finally a theme I can live with!
  (load-theme 'leuven t) 
  (setq org-fontify-whole-heading-line t)
  (require 'powerline)
  (powerline-default-theme)
  (powerline-default-theme)
#+END_SRC
*** Add custom lisp director to load path
We try to install most things using the package manager, but a few things need to be included in a custom lisp directory. Add it to the path so we can load from it easily.
#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; add custom lisp directory to path
  (let ((default-directory (concat user-emacs-directory "lisp/")))
    (setq load-path
          (append
           (let ((load-path (copy-sequence load-path))) ;; Shadow
             (append 
              (copy-sequence (normal-top-level-add-to-load-path '(".")))
              (normal-top-level-add-subdirs-to-load-path)))
           load-path)))

#+END_SRC
*** Spell checking

#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; enable on-the-fly spell checking
  (add-hook 'after-init-hook
            (lambda ()
              (add-hook 'text-mode-hook
                        (lambda ()
                          (flyspell-mode 1)))))

  ;; prevent flyspell from finding mistakes in the code
  (add-hook 'after-init-hook
            (lambda ()
              (add-hook 'prog-mode-hook
                        (lambda ()
                          ;; `ispell-comments-and-strings'
                          (flyspell-prog-mode)))))
#+END_SRC

*** Fonts
Emacs fonts are "just OK" out of the box. Not bad, but not great either. Here we set fallback fonts for different Unicode blocks, dramatically increasing the number of characters Emacs will display.

#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; unicode-fonts doesn't work well on emacs < 24.3
  (when (>= (string-to-number 
               (concat 
                (number-to-string emacs-major-version) 
                "." 
                (number-to-string emacs-minor-version)))
              24.3)
    (require 'persistent-soft)
    (require 'unicode-fonts)
    (unicode-fonts-setup))

#+END_SRC

*** Minibuffer hints and completion
There are several different systems for providing completion hints in emacs. The default pcomplete system shows completions on demand (usually bound to tab key) in an emacs buffer. Here we set up ido-mode, which instead shows these completions on-the-fly in the minibuffer. These completions are primarily used to show available files (e.g., with ~find-file~) and emacs functions (e.g., with ~execute-extended-command~). Completion for in-buffer text (e.g., methods in python-mode, or arguments in R-mode) are handled separately by [[*Auto-complete%20configuration][company-mode]].

#+BEGIN_SRC emacs-lisp :tangle init.el
  ;;; Completion hints for files and buffers buffers
  (setq ido-file-extensions-order '(".R" ".r" ".sh" ".tex" ".bib" ".org" 
                                    ".py" ".emacs" ".xml" "org.el" ".pdf"
                                    ".txt" ".html" ".png" ".ini" ".cfg" 
                                    ".conf"))

  ;; load ido 
  (require 'ido)
  (setq ido-auto-merge-work-directories-length -1) ;; disable auto-merge
  (setq ido-use-virtual-buffers t) ;; show recent files in buffer menu
  (ido-mode 1)
  (ido-everywhere 1)
  (setq ido-enable-flex-matching t)

  ;; use ido everywhere you can
  (require 'ido-ubiquitous)
  (ido-ubiquitous-mode 1)

  ;; present ido suggestions vertically
  (require 'ido-vertical-mode)
  (ido-vertical-mode 1)

  ;; set nice ido decorations
  (setq ido-decorations '("\n➔ " "" "\n " "\n ..." "[" "]" " [No match]" " [Matched]" " [Not readable]" " [Too big]" " [Confirm]" "\n➔ " ""))

  ;; don't use ido for dired
  (setq ido-read-file-name-non-ido '(dired))

  ;; color directories blue, firstmatch bold etc.
  (set-face-attribute 'ido-first-match nil
                      :weight 'bold 
                      :height '1.125
                      :foreground "red")
  (set-face-attribute 'ido-only-match nil
                      :weight 'bold 
                      :height '1.125
                      :foreground "ForestGreen")

  (set-face-attribute 'ido-subdir nil
                      :foreground "blue")

  ;; set sensible keys for id in vertical mode
  (setq ido-vertical-define-keys (quote C-n-C-p-up-down-left-right))

  ;; use ido for kill-ring
  (require 'kill-ring-ido)
  (setq kill-ring-ido-shortage-length 20)

  (global-set-key (kbd "M-y") 'kill-ring-ido)

  ;; show recently opened files
  (add-hook 'after-init-hook
            '(lambda()
               (global-company-mode 1)
               (require 'recentf)
               (setq recentf-max-menu-items 50)
               (recentf-mode 1)))

  (setq ido-use-virtual-buffers 'auto)

  (defun ido-recentf-open ()
    "Use `ido-completing-read' to find a recent file."
    (interactive)
    (if (find-file (ido-completing-read "Find recent file: " recentf-list))
        (message "Opening file...")
      (message "Aborting")))

  (global-set-key (kbd "C-x C-r") 'ido-recentf-open)

    ;;; Completion hints for emacs functions
  ;; Horrible work-around to make smex work with emacs < 24.3:
  ;; remove this part when emacs is updated.
  ;; Check if Smex is supported
  (when (equal (cons 1 1)
               (ignore-errors
                 (subr-arity (symbol-function 'execute-extended-command))))
    (defun execute-extended-command (prefixarg &optional command-name)
      "Read function name, then read its arguments and call it."
      (interactive (list current-prefix-arg (read-extended-command)))
      (if (null command-name)
          (setq command-name (let ((current-prefix-arg prefixarg)) ; for prompt
                               (read-extended-command))))
      (let* ((function (and (stringp command-name) (intern-soft command-name)))
             (binding (and suggest-key-bindings
                           (not executing-kbd-macro)
                           (where-is-internal function overriding-local-map t))))
        (unless (commandp function)
          (error "`%s' is not a valid command name" command-name))
        (setq this-command function)
        (setq real-this-command function)
        (let ((prefix-arg prefixarg))
          (command-execute function 'record))
        (when binding
          (let* ((waited
                  (sit-for (cond
                            ((zerop (length (current-message))) 0)
                            ((numberp suggest-key-bindings) suggest-key-bindings)
                            (t 2)))))
            (when (and waited (not (consp unread-command-events)))
              (with-temp-message
                  (format "You can run the command `%s' with %s"
                          function (key-description binding))
                (sit-for (if (numberp suggest-key-bindings)
                             suggest-key-bindings
                           2)))))))))
  ;; end horrible hack

  (smex-initialize)
  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
  ;; This is your old M-x.
  (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)

  ;; modify smex so that typing a space will insert a hyphen 
  ;; (from http://www.emacswiki.org/Smex#toc6)
  (defadvice smex (around space-inserts-hyphen activate compile)
    (let ((ido-cannot-complete-command 
           `(lambda ()
              (interactive)
              (if (string= " " (this-command-keys))
                  (insert ?-)
                (funcall ,ido-cannot-complete-command)))))
      ad-do-it))

#+END_SRC

*** Auto-complete configuration
Here we configure in-buffer text completion using the company-mode package. These completions are available on-demand using the =C-TAB= or =M-x company-complete=.

#+BEGIN_SRC emacs-lisp :tangle init.el
  ;;Use tab to C-TAB to complete
  (eval-after-load "company"
    '(progn
       ;; don't start automatically 
       (setq company-idle-delay nil)
       ;; complete using C-TAB
       (global-set-key (kbd "<C-tab>") 'company-complete)
       ;; use C-n and C-p to cycle through completions
       ;; (define-key company-mode-map (kbd "<tab>") 'company-complete)
       (define-key company-active-map (kbd "C-n") 'company-select-next)
       (define-key company-active-map (kbd "<tab>") 'company-select-next)
       (define-key company-active-map (kbd "C-p") 'company-select-previous)
       (define-key company-active-map (kbd "<backtab>") 'company-select-previous)
       ;; enable math completions
       (require 'company-math)
       ;; company-mode completions for ess
       (require 'company-ess)
       (add-to-list 'company-backends 'company-math-symbols-unicode)
       (add-to-list 'company-backends 'company-math-symbols-latex)
       ;; ;; disable dabbrev
       ;; (delete 'company-dabbrev company-backends)
       ;; (delete 'company-dabbrev-code company-backends)
       ))

  (add-hook 'after-init-hook 'global-company-mode)

#+END_SRC

*** Outline-magic
I encourage you to use [[*Note%20taking%20and%20outlining%20(Org-mode)][org-mode]] for note taking and outlining, but it can be convenient to treat arbitrary buffers as outlines. The outline-magic mode can help with that.

#+BEGIN_SRC emacs-lisp :tangle init.el
  ;;; Configure outline minor modes
  ;; Less crazy key bindings for outline-minor-mode
  (setq outline-minor-mode-prefix "\C-c\C-o")
  ;; load outline-magic along with outline-minor-mode
  (add-hook 'outline-minor-mode-hook 
            (lambda () 
              (require 'outline-magic)
              (define-key outline-minor-mode-map "\C-c\C-o\t" 'outline-cycle)))
  ;; turn on for some modes:
  (add-hook 'LaTeX-mode-hook 'outline-minor-mode t)
  (add-hook 'prog-mode-hook 'outline-minor-mode t)

#+END_SRC

*** Major modes configuration

**** General repl (read-eval-print-loop) config
Load eval-in-repl for bash, elisp, and python interaction.
#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; require the main file containing common functions
  (require 'eval-in-repl)
  (setq comint-process-echoes t)

  ;; truncate lines in comint buffers
  (add-hook 'comint-mode-hook
            '(lambda()
              (setq truncate-lines 1)))
#+END_SRC

**** Run R in emacs (ESS)

#+BEGIN_SRC emacs-lisp :tangle init.el
  ;;;  ESS (Emacs Speaks Statistics)

  ;; Start R in the working directory by default
  (setq ess-ask-for-ess-directory nil)

  ;; Scroll down when R generates output
  (setq comint-scroll-to-bottom-on-input t)
  (setq comint-scroll-to-bottom-on-output t)
  (setq comint-move-point-for-output t)

  ;; Make sure ESS is loaded
  (require 'ess-site)

  ;; extra ESS stuff inspired by https://github.com/gaborcsardi/dot-emacs/blob/master/.emacs
  (ess-toggle-underscore nil)
  (defun my-ess-post-run-hook ()
    ;; reset output width when window is re-sized
    (add-hook 'inferior-ess-mode-hook
              '(lambda()
                 (defun my-ess-execute-screen-options (foo)
                   (ess-execute-screen-options))
                 (add-to-list
                  'window-size-change-functions
                  'my-ess-execute-screen-options)))
    )
  (add-hook 'ess-post-run-hook 'my-ess-post-run-hook)

  ;; truncate long lines in R source files
  (add-hook 'ess-mode-hook
            '(lambda()
               ;; don't wrap long lines
               (setq truncate-lines 1)
               ;; put company-capf at the front of the completion sources list
               (set (make-local-variable 'company-backends)
                    (cons 'company-capf company-backends))
               (delete-dups company-backends)
               ))

  (add-hook 'R-mode-hook
            '(lambda()
               ;; make sure completion calls company-ess first
               (require 'company-ess)
               (set (make-local-variable 'company-backends)
                    (cons 'company-ess-backend company-backends))
               (delete-dups company-backends)
               ))

  ;; try to get sane indentation
  (setq ess-first-continued-statement-offset 2)
  (setq ess-continued-statement-offset 0)
  (setq ess-arg-function-offset-new-line 0)
  (setq ess-arg-function-offset nil)
  (setq ess-default-style 'DEFAULT)

#+END_SRC

**** Run python in emacs (elpy)

#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; Python completion and code checking
  (setq elpy-modules '(elpy-module-company
                       elpy-module-eldoc
                       elpy-module-flymake
                       elpy-module-pyvenv
                       elpy-module-highlight-indentation
                       elpy-module-sane-defaults))
  (elpy-enable)

  ;; use eval-in-repl to eval visibly in elpy buffers
  (add-hook 'elpy-mode-hook
            '(lambda ()
               (require 'eval-in-repl-python)
               (define-key elpy-mode-map "\C-c\C-c" 'eir-eval-in-python)
               (setq company-idle-delay nil)))

#+END_SRC

**** emacs lisp REPL (ielm)

#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; ielm
  (require 'eval-in-repl-ielm)
  ;; For .el files
  (define-key emacs-lisp-mode-map "\C-c\C-c" 'eir-eval-in-ielm)
  ;; For *scratch*
  (define-key lisp-interaction-mode-map "\C-c\C-c" 'eir-eval-in-ielm)
  ;; For M-x info
  (define-key Info-mode-map "\C-c\C-c" 'eir-eval-in-ielm)

#+END_SRC

**** Light-weight markup language (Markdown mode)

#+BEGIN_SRC emacs-lisp :tangle init.el

  ;;; markdown mode

  ;; Use markdown-mode for files with .markdown or .md extensions
  (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

#+END_SRC

**** Typesetting markup (AucTeX)

#+BEGIN_SRC emacs-lisp :tangle init.el

  ;;; AucTeX config
  ;; turn on math mode and and index to imenu
  (add-hook 'LaTeX-mode-hook 
            '(lambda ()
               (turn-on-reftex)
               (TeX-PDF-mode t)
               (LaTeX-math-mode)
               (imenu-add-to-menubar "Index")
  ;; Allow paragraph filling in tables
               (setq LaTeX-indent-environment-list
                     (delq (assoc "table" LaTeX-indent-environment-list)
                           LaTeX-indent-environment-list))
               (setq LaTeX-indent-environment-list
                     (delq (assoc "table*" LaTeX-indent-environment-list)
                           LaTeX-indent-environment-list))))
  ;; Misc. latex settings
  (setq TeX-parse-self t
        TeX-auto-save t)
  (setq-default TeX-master nil)
  ;; Add beamer frames to outline list
  (setq TeX-outline-extra
        '(("\\\\begin{frame}\n\\|\\\\begin{frame}.*{.*}\\|[       ]*\\\\frametitle\\b" 3)))
  ;; reftex settings
  (setq reftex-enable-partial-scans t)
  (setq reftex-save-parse-info t)
  (setq reftex-use-multiple-selection-buffers t)
  (setq reftex-plug-into-AUCTeX t)
  (add-hook 'bibtex-mode-hook
            '(lambda ()
               (define-key bibtex-mode-map "\M-q" 'bibtex-fill-entry)))

#+END_SRC

**** Note taking and outlining (Org-mode)

#+BEGIN_SRC emacs-lisp :tangle init.el

  (require 'org)

  ;; Load additional export formats
  ;; (require 'ox-odt)
  ;; (require 'ox-md)
  ;; (require 'ox-freemind)
  ;; (require 'ox-bibtex)

  ;; Update images from babel code blocks automatically
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)

  ;; Enable common programming language support in org-mode
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((R . t)
     (python . t)
     (matlab . t)
     (emacs-lisp . t)
     (sh . t)
     (dot . t)
     (latex . t)
     (octave . t)
     (ditaa . t)
     (org . t)
     (perl . t)
     (julia . t)
  ))

  ;; Set sensible mode for editing dot files
  (add-to-list 'org-src-lang-modes '("dot" . graphviz-dot))

  ;; Fontify code blocks in org-mode
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-confirm-babel-evaluate nil)

  (require 'org-capture)
  (require 'org-protocol)
  (require 'ob-stata)

  ;; set up capture
  (setq org-default-notes-file (concat org-directory "/notes.org"))

  (setq org-capture-templates
        '(("t" "Todo" entry (file+headline "~/org/notes.org" "RT Tasks")
           "* TODO %?\n  %i\n  %a")))

  (define-key global-map "\C-cc" 'org-capture)

#+END_SRC


**** Multiple modes in one "buffer" (polymode)

#+BEGIN_SRC emacs-lisp :tangle init.el

  ;;; polymode

  ;; polymode requires emacs >= 24.3, does not work on the RCE. 
  (when (>= (string-to-number 
             (concat 
              (number-to-string emacs-major-version) 
              "." 
              (number-to-string emacs-minor-version)))
            24.3)
    ;; Activate polymode for files with the .md extension
    (add-to-list 'auto-mode-alist '("\\.md" . poly-markdown-mode))
    ;; Activate polymode for R related modes
    (add-to-list 'auto-mode-alist '("\\.Snw" . poly-noweb+r-mode))
    (add-to-list 'auto-mode-alist '("\\.Rnw" . poly-noweb+r-mode))
    (add-to-list 'auto-mode-alist '("\\.Rmd" . poly-markdown+r-mode))
    (add-to-list 'auto-mode-alist '("\\.rapport" . poly-rapport-mode))
    (add-to-list 'auto-mode-alist '("\\.Rhtml" . poly-html+r-mode))
    (add-to-list 'auto-mode-alist '("\\.Rbrew" . poly-brew+r-mode))
    (add-to-list 'auto-mode-alist '("\\.Rcpp" . poly-r+c++-mode))
    (add-to-list 'auto-mode-alist '("\\.cppR" . poly-c++r-mode)))

#+END_SRC

**** File browsing (Dired+)
#+BEGIN_SRC emacs-lisp :tangle init.el
  ;;; Dired and Dired+ configuration

  ;; load dired+ and mouse3
  (require 'dired+)
  (require 'mouse3)

  ;; set dired listing options
  (setq dired-listing-switches "-alDhp")

  ;; more subdued colors
  (set-face-attribute 'diredp-ignored-file-name nil
                      :foreground "LightGray"
                      :background nil)
  (set-face-attribute 'diredp-read-priv nil
                      :foreground "LightGray"
                      :background nil)
  (set-face-attribute 'diredp-write-priv nil
                      :foreground "LightGray"
                      :background nil)
  (set-face-attribute 'diredp-other-priv nil
                      :foreground "LightGray"
                      :background nil)
  (set-face-attribute 'diredp-rare-priv nil
                      :foreground "LightGray"
                      :background nil)
  (set-face-attribute 'diredp-no-priv nil
                      :foreground "LightGray"
                      :background nil)
  (set-face-attribute 'diredp-exec-priv nil
                      :foreground "LightGray"
                      :background nil)
  (set-face-attribute 'diredp-file-name nil
                      :weight 'bold
                      :background nil)
  (set-face-attribute 'diredp-dir-priv nil
                      :weight 'bold)
  (set-face-attribute 'diredp-file-suffix nil
                      :foreground nil)
                      
  ;; make sure dired buffers end in a slash so we can identify them easily
  (defun ensure-buffer-name-ends-in-slash ()
    "change buffer name to end with slash"
    (let ((name (buffer-name)))
      (if (not (string-match "/$" name))
          (rename-buffer (concat name "/") t))))
  (add-hook 'dired-mode-hook 'ensure-buffer-name-ends-in-slash)
  (add-hook 'dired-mode-hook
            '(lambda()
               (setq truncate-lines 1)))

  ;; open files in external programs
  ;; (from http://ergoemacs.org/emacs/emacs_dired_open_file_in_ext_apps.html
  (defun xah-open-in-external-app (&optional file)
    "Open the current file or dired marked files in external app.

  The app is chosen from your OS's preference."
    (interactive)
    (let (doIt
          (myFileList
           (cond
            ((string-equal major-mode "dired-mode")
             (dired-get-marked-files))
            ((not file) (list (buffer-file-name)))
            (file (list file)))))
      (setq doIt (if (<= (length myFileList) 5)
                     t
                   (y-or-n-p "Open more than 5 files? "))) 
      (when doIt
        (cond
         ((string-equal system-type "windows-nt")
          (mapc
           (lambda (fPath)
             (w32-shell-execute "open" (replace-regexp-in-string "/" "\\" fPath t t)))
           myFileList))
         ((string-equal system-type "darwin")
          (mapc
           (lambda (fPath)
             (shell-command (format "open \"%s\"" fPath)))
           myFileList))
         ((string-equal system-type "gnu/linux")
          (mapc
           (lambda (fPath)
             (let ((process-connection-type nil))
               (start-process "" nil "xdg-open" fPath))) myFileList))))))
  ;; open files from dired with "E"
  (define-key dired-mode-map (kbd "E") 'xah-open-in-external-app)
  ;; use zip/unzip to compress/uncompress zip archives
  (eval-after-load "dired-aux"
   '(add-to-list 'dired-compress-file-suffixes 
                 '("\\.zip\\'" "" "unzip")))

#+END_SRC

**** Shell modes (shell and eshell)

#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; shell
  (require 'essh) ; if not done elsewhere; essh is in the local lisp folder
  (require 'eval-in-repl-shell)
  (add-hook 'sh-mode-hook
            '(lambda()
               (local-set-key "\C-c\C-c" 'eir-eval-in-shell)))


  ;; Automatically adjust output width in commint buffers
  ;; from http://stackoverflow.com/questions/7987494/emacs-shell-mode-display-is-too-wide-after-splitting-window
  (defun comint-fix-window-size ()
    "Change process window size."
    (when (derived-mode-p 'comint-mode)
      (let ((process (get-buffer-process (current-buffer))))
        (unless (eq nil process)
          (set-process-window-size process (window-height) (window-width))))))

  (defun my-shell-mode-hook ()
    ;; add this hook as buffer local, so it runs once per window.
    (add-hook 'window-configuration-change-hook 'comint-fix-window-size nil t))
    ;; auto-complete for shell-mode (linux only)
  (if (eq system-type 'gnu/linux)
      (progn 
        (setq explicit-shell-file-name "bash")
        (setq explicit-bash-args '("-c" "-t" "export EMACS=; stty echo; bash"))  
        (ansi-color-for-comint-mode-on)
        (add-hook 'shell-mode-hook
            '(lambda()
               ;; make sure completion calls company-readline first
               (require 'readline-complete)
               (set (make-local-variable 'company-backends)
                    (cons 'company-readline company-backends))
               (delete-dups company-backends)
               ))
        (add-hook 'rlc-no-readline-hook (lambda () (company-mode -1)))))

  (add-hook 'shell-mode-hook
            '(lambda()
               ;; add this hook as buffer local, so it runs once per window.
               (add-hook 'window-configuration-change-hook 'comint-fix-window-size nil t)))

  ;; extra completion for eshell
  (add-hook 'eshell-mode-hook
            '(lambda()
               (require 'pcmpl-args)
               (require 'pcmpl-pip)
               ;; programs that don't work well in eshell and should be run in visual mode
               (add-to-list 'eshell-visual-commands "ssh")
               (add-to-list 'eshell-visual-commands "tail")
               (add-to-list 'eshell-visual-commands "htop")
               (setq eshell-visual-subcommands '(("git" "log" "diff" "show")))))


#+END_SRC


*** Miscellaneous

#+BEGIN_SRC emacs-lisp :tangle init.el

  ;;; Misc. Conveniences

  ;; window arrangement history
  (setq winner-dont-bind-my-keys t) 
  (winner-mode 1)

  ;;; set up unicode
  (prefer-coding-system       'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (setq buffer-file-coding-system 'utf-8)                      
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))

  ;; start the server if not already started
  (add-hook 'after-init-hook
                    '(lambda ()
                       (load "server")
                       (unless (server-running-p) (server-start))))

  ;; ;; use regex search by default
  ;; (global-set-key (kbd "C-s") 'isearch-forward-regexp)
  ;; (global-set-key (kbd "C-r") 'isearch-backward-regexp)

  ;; Use spaces for indentation
  (setq-default indent-tabs-mode nil)

  ;; Make sure copy-and-paste works with other programs
  (setq x-select-enable-clipboard t
        x-select-enable-primary t
        save-interprogram-paste-before-kill t)

  ;; Text pasted with mouse should be inserted at cursor position
  (setq mouse-yank-at-point t)

  ;; Mouse scrolling behavior
    (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
    (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse

  ;; Put backups in a separate folder
  (setq backup-directory-alist `(("." . ,(concat user-emacs-directory
                                                 "backups"))))

  ;; Apropos commands should search everything
  (setq apropos-do-all t)

  ;; Store the places file in the emacs user directory
  (setq save-place-file (concat user-emacs-directory "places"))


  ;; better naming of duplicate buffers
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)

  ;; put cursor in last used position when re-opening file
  (require 'saveplace)
  (setq-default save-place t)

  ;; Use y/n instead of yes/no
  (fset 'yes-or-no-p 'y-or-n-p)

  (transient-mark-mode 1) ; makes the region visible
  (line-number-mode 1)    ; makes the line number show up
  (column-number-mode 1)  ; makes the column number show up

  (setq global-font-lock-mode 1) ; everything should use fonts
  (setq font-lock-maximum-decoration t) ;; decorate as much as possible
  (show-paren-mode t) ;; highlight matching paren

  ;; smooth scrolling with C-up/C-down
  (require 'smooth-scroll)
  (smooth-scroll-mode)
  (global-set-key [(control down)] 'scroll-up-1)
  (global-set-key [(control up)] 'scroll-down-1)
  (global-set-key [(control left)] 'scroll-right-1)
  (global-set-key [(control right)] 'scroll-left-1)

  ;; enable toggling paragraph un-fill
  ;; from http://www.emacswiki.org/emacs/UnfillParagraph
  (defun unfill-paragraph ()
    "Takes a multi-line paragraph and makes it into a single line of text."
    (interactive)
    (let ((fill-column (point-max)))
      (fill-paragraph nil)))

  (define-key global-map "\M-Q" 'unfill-paragraph)

  ;; line wrapping
  (setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
  (add-hook 'text-mode-hook 'visual-line-mode 1)
  (add-hook 'prog-mode-hook
            '(lambda()
                (setq truncate-lines 1)))

  ;; don't require two spaces for sentence end.
  (setq sentence-end-double-space nil)

  ;; Use CUA mode only for handy rectangle features
  (cua-selection-mode t)

  ;; Make windmove work in org-mode:
  (add-hook 'org-shiftup-final-hook 'windmove-up)
  (add-hook 'org-shiftleft-final-hook 'windmove-left)
  (add-hook 'org-shiftdown-final-hook 'windmove-down)
  (add-hook 'org-shiftright-final-hook 'windmove-right)

  ;; The beeping can be annoying--turn it off
  (set-variable 'visible-bell t)

  ;; save settings made using the customize interface to a sparate file
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (unless (file-exists-p custom-file)
    (write-region ";; Put user configuration here" nil custom-file))
  (load custom-file 'noerror)

  ;; byte-compile init file if needed
  (add-hook 'after-init-hook
            (lambda ()
              (byte-recompile-file user-init-file nil 1 nil)
              (switch-to-buffer "*scratch*")))

  ;; cleanup
  (switch-to-buffer "*scratch*")
  (delete-other-windows)
  (redisplay t)

#+END_SRC


** Implementation issues
The version of Emacs on the RCE is old and configured in a non-standard way that makes it difficult to implement a sane user config. 

Part of the problem is that RCE does not run the latest released emacs; another problem is that a site-wide configuration file activates the package system, adds third-party package repositories, and installs some packages. Normally the package system is not activated until after the users init file, doing it in the reverse order (as is currently done on the RCE) causes problems. These issues cause breakages for the command-hinter =smex=, the literate programming support provided by =polymode=, and interfere with the installation of the latest org-mode.

Both the "old emacs" and "strange emacs configuration" problems need to be corrected at the system admin level on the RCE. For the moment if you want to use this configuration on the RCE you need to start emacs with =emacs --no-site-file --no-site-lisp= so that the latest org-mode can be installed. The emacs configuration implemented here includes a dirty hack to make =smex= work on older emacs, so the only remaining issue is that =polymode= will not work on the RCE until the emacs installed there is updated. The configuration simply checks the emacs version and only activates =polymode= if it is supported.


** Next steps
  :PROPERTIES:
  :CUSTOM_ID: Next-steps
  :END:

The next steps are to 1) review the requirements list to add/delete requirements needed, 2) update the configuration file to add any additional requirements added in step 2, and 3) test/evaluate the configuration and revise until it performs as desired.


* Footnotes

[fn:1] See ticket [[https://help.hmdc.harvard.edu/Ticket/Display.html?id=179621][179621]].

