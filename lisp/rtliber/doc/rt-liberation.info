This is rt-liberation.info, produced by makeinfo version 5.2 from
rt-liberation.texinfo.

(C) 2009 Yoni Rabkin yonirabkin@member.fsf.org
     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.1 or any later version published by the Free Software
     Foundation; with no Invariant Sections, no Front-Cover Texts, and
     no Back-Cover Texts.  A copy of the license is included in the
     section entitled "GNU Free Documentation License".
INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* rt-liberation: (rt-liber).           rt-liberation
END-INFO-DIR-ENTRY


File: rt-liberation.info,  Node: Top,  Next: Introduction,  Prev: (dir),  Up: (dir)

The rt-liberation Manual
************************

This is the Manual for the rt-liberation system

   (C) 2009 Yoni Rabkin yonirabkin@member.fsf.org
     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.1 or any later version published by the Free Software
     Foundation; with no Invariant Sections, no Front-Cover Texts, and
     no Back-Cover Texts.  A copy of the license is included in the
     section entitled "GNU Free Documentation License".

* Menu:

* Introduction::                Introduction to rt-liberation.
* Dependencies::                Before you can use rt-liberation.
* Installation::                Setup rt-liberation to work on the system.

Using rt-liberation
* Queries::                     Retrieve particular tickets from the server.
* Ticket Browser::              Browse the query results.
* Ticket Viewer::               Interface to query results.

Extensions
* Gnus Integration::            Sending email to the RT server via Gnus.
* Tracking Updates::            Keeping up to date with ticket changes.
* Batch Operations::            Performing operations on batches of tickets.
* Local Storage::               Associate arbitrary data with tickets.



Indices
* Concept Index::
* Function Index::
* Variable Index::
* Keybinding Index::

 -- The Detailed Node Listing --

Queries

* Query Compiler::              Compiling Emacs Lisp to TicketSQL.
* Query Language::              A description of the Sexp-based language.

Ticket Browser

* Ticket Browser Display::      How tickets are displayed in the browser.
* Ticket Browser Sorting::      How tickets are sorted in the browser.
* Ticket Browser Filtering::    How to filter tickets out of the browser.
* Multiple Ticket Browsers::    More than one ticket browser buffer.



File: rt-liberation.info,  Node: Introduction,  Next: Dependencies,  Up: Top

1 Introduction
**************

rt-liberation is a GNU/Emacs package for working with the Request
Tracker (henceforth abbreviated as just "RT") software from Best
Practical Solutions.  RT has a Web interface and a command line
interface (the "RT CLI"). rt-liberation uses the RT CLI as a backend to
communicate to the server.

   rt-liberation allows sending search queries to the RT server,
browsing the resulting tickets, viewing the tickets' contents and
performing operations on the ticket.


File: rt-liberation.info,  Node: Dependencies,  Next: Installation,  Prev: Introduction,  Up: Top

2 Dependencies
**************

rt-liberation has been tested exclusively on GNU/Emacs.

   rt-liberation uses the RT command line interface (RT CLI) as a
back-end to communicate with the RT server.  rt-liberation will need a
local copy of the RT software on the machine running rt-liberation.  RT
is available at <http://bestpractical.com/rt/download.html>

* Menu:

* RT CLI Setup::        Getting the RT Command Line Interface to work


File: rt-liberation.info,  Node: RT CLI Setup,  Up: Dependencies

2.1 RT CLI Setup
================

The following is a short description of how to get the RT CLI setup on
the machine where rt-liberation will be running.  It assumes a GNU/Linux
distribution such as Trisquel <http://trisquel.info/>.

   You need the address of the remote RT server (note whether it's an
HTTP or HTTPS address), and the username and password for the user
account on that server.

   Download a local copy of RT (version 4.2.3 happened to be extant at
the time of writing).

     $ wget http://download.bestpractical.com/pub/rt/release/rt-4.2.3.tar.gz
     $ tar xzf rt-4.2.3.tar.gz

   Navigate down to the "bin" directory and try to run the RT CLI.

     $ cd rt-4.2.3/bin
     $ ./rt

   If you don't already have Perl LWP installed it will fail to run, in
which case you have to satisfy this dependency.  The following command
should do it on a Trisquel GNU/Linux or similar system:

     sudo apt-get install liblwp-protocol-https-perl

   Trying to run the RT CLI at this point should work, and you will be
greeted by the friendly RT CLI prompt "rt>".  Feel free to hit Ctrl-C at
this point because while the RT CLI is running it is still unconfigured.

   The RT CLI looks for a file named ".rtrc" in your home directory, so
create an "~/.rtrc" file and, using the information collected earlier,
fill in the details.

     server https://rt.server.somewhere
     user USERNAME-ON-RT
     passwd PASSWORD-ON-RT

   Now back to running the RT CLI we can enter a simple RT query to
check the setup.  If everything is set up correctly then the result will
be a list of tickets.

     rt> ls "Queue=sprockets and Status=new"
     Ticket Owner Queue    Age   Told Status Requestor Subject
     --------------------------------------------------------------------------------
     ==========  2 unowned tickets ==========
        701       sproc  5 min        new    admin@no. foo
        702       sproc  4 min        new    john.foo@ john's foo

   At this point you know that rt-liberation has everything it needs to
call into the server(1).

   ---------- Footnotes ----------

   (1) Implementing rt-liberation in this way has the additional benefit
of isolating the rt-liberation code somewhat from changes in the way the
RT CLI communicates with the RT server.


File: rt-liberation.info,  Node: Installation,  Next: Queries,  Prev: Dependencies,  Up: Top

3 Installation
**************

rt-liberation can be configured in the ~/.emacs file.

   Place rt-liberation in the load path:

     (add-to-list 'load-path "/PATH/TO/rt-liberation/")

   Tell GNU/Emacs to load the package with:

     (require 'rt-liberation)

   Tell rt-liberation where to find the RT binary and which version is
being used, for example:

     (setq rt-liber-rt-binary "~/src/rt-3.8.2/bin/rt"
           rt-liber-rt-version "3.8.8")

   rt-liberation can issue a command to "take" a ticket, that is, assign
it to yourself.  For this the variable RT-LIBER-USERNAME must be set:

     (setq rt-liber-username "someuser")

   rt-liberation can also launch a Web browser to visit a ticket.  For
that to work the base URL needs to be set in RT-LIBER-BASE-URL.  For
example:

   (setq rt-liber-base-url "https://rt.foo.org/")


File: rt-liberation.info,  Node: Queries,  Next: Ticket Browser,  Prev: Installation,  Up: Top

4 Queries
*********

A typical RT server is meant to manage a large amount of tickets.  Much
more that would be convenient to view all at once.  Instead queries are
used to view only a subset of the tickets on the server.

   rt-liberation has its own Sexp-based query language which maps to
RT's TicketSQL language.

* Menu:

* Query Compiler::              Compiling Emacs Lisp to TicketSQL.
* Query Language::              A description of the Sexp-based language.


File: rt-liberation.info,  Node: Query Compiler,  Next: Query Language,  Up: Queries

4.1 Query Compiler
==================

In order to browse and view tickets a list of needs to be requested from
the RT server.  Typically the tickets answer some kind of criteria, for
example "tickets no older than a week owned by me which have \"foobar\"
in their subject line".  In RT these criteria are formulated with
"TicketSQL" queries; a structured query language specific to RT.

   rt-liberation provides a query compiler function to compile Emacs
Lisp symbolic expressions into TicketSQL. The query compiler supports a
number of TicketSQL tokens.


File: rt-liberation.info,  Node: Query Language,  Prev: Query Compiler,  Up: Queries

4.2 Query Language
==================

rt-liberation's Sexp-based query language covers a portion of the
TicketSQL language.  Here are some of the supported TicketSQL tokens:
Boolean tokens as a means of combining query subsections: "and", "or",
"not".  LIKE attribute tokens: "subject", "content".

   For example here is a query with both Boolean and LIKE tokens:

     (rt-liber-compile-query
         (and (queue "bugs")
              (content "gnu")))

     ==> "Queue = 'bugs' AND Content LIKE 'gnu'"

   We can also express negation (note that the compiler produces "!="
and "NOT LIKE" for negation depending on the context):

     (rt-liber-compile-query
      (and (queue "bugs")
           (not (owner "Nobody"))
           (not (content "sprigz"))
           (status "new")))

     ==> "Queue = 'licensing' AND Owner != 'Nobody' \
         AND Content NOT LIKE 'sprigz' AND Status = 'new'"

   Attribute tokens which match an attribute to a specific field such
as: "owner", "status" and "queue".  Temporal tokens which limit the
search results to tickets within a certain time interval: "created" and
"lastupdated".  Note that temporal keywords such as "created" always
accept two arguments: BEFORE and AFTER. When either BEFORE or AFTER
aren't needed, use NIL instead.

   One of the advantages of being able to express the TicketSQL queries
as Emacs Lisp is to be able to express queries using Emacs Lisp
functions.

   Here is a slightly more involved example to illustrate:

     (rt-liber-compile-query
      (and (queue "bugs")
           (owner "me@myaddress.com")
           (status "open")
           (lastupdated nil
                        (format-time-string
                          "%Y-%m-%d"
                          (seconds-to-time
                           (- (time-to-seconds (current-time))
                              (* 60 60 24 7)))))))

     ==> "Queue = 'bugs' AND Owner = 'me@myaddress.com' AND Status = 'open' AND LastUpdated > '2009-03-30'"

   Here is an example of how the ticket browser and compiler can be used
in function calls:

     (defun rt-liber-display-ticket (ticket-id)
       "Display ticket with TICKET-ID in the ticket-browser."
       (interactive "MTicket ID: ")
       (rt-liber-browse-query
        (rt-liber-compile-query
         (and (queue "complaints")
              (id ticket-id)))))


File: rt-liberation.info,  Node: Ticket Browser,  Next: Ticket Viewer,  Prev: Queries,  Up: Top

5 Ticket Browser
****************

The ticket browser is a special buffer which provides a convenient
interface to the results of a server query.  The ticket browser can be
started by invoking: (rt-liber-browse-query QUERY), where QUERY is a
TicketSQL query.  The TicketSQL query can be entered manually as a
string or as the return value of the query compiler.

 -- Function: rt-liber-browse-query QUERY &optional NEW
     Runs QUERY against the server and launches the browser.

     If NEW is non-nil then the query results will be displayed in a new
     buffer, otherwise the query results will override the contents of
     the existing ticket browser buffer.  If NEW is a string then that
     will be the name of the new buffer.

   The TicketSQL query can be the return value of the query compiler.
For example:

     (rt-liber-browse-query
      (rt-liber-compile-query
          (and (queue "bugs")
               (content "gnu")))

   Since the return value of the query compiler is just a TicketSQL
string, the following is equivalent:

     (rt-liber-browse-query "Queue = 'bugs' AND Content LIKE 'gnu'")

   The ticket browser defines a number of commands:

'q'
     Bury the ticket browser buffer.

'n'
     Move point to the next ticket.

'p'
     Move point to the previous ticket.

'RET'
     Visit the ticket at point in the *Note Ticket Viewer::.

'g'
     Refresh the contents of the browser buffer.

'G'
     Refresh the contents of the browser buffer.  Return point to the
     current ticket after the refresh (if possible).

's'
     Mark the ticket as spam.

'S'
     Delete marked tickets as spam (requires rt-liberation-multi
     package).

'a'
     Assign the ticket to a user.

'r'
     Mark the ticket as "resolved".

'o'
     Mark the ticket as "open".

't'
     Assign the ticket at point to RT-LIBER-USERNAME.

'SPC'
     Scroll the text of the ticket browser upward.

'DEL'
     Scroll the text of the ticket browser downward.

'm'
     Move the ticket to a different queue.

'P'
     Set the numerical priority level of the ticket at point.

* Menu:

* Ticket Browser Display::      How tickets are displayed in the browser.
* Ticket Browser Sorting::      How tickets are sorted in the browser.
* Ticket Browser Filtering::    How to filter tickets out of the browser.
* Multiple Ticket Browsers::    More than one ticket browser buffer.


File: rt-liberation.info,  Node: Ticket Browser Display,  Next: Ticket Browser Sorting,  Up: Ticket Browser

5.1 Ticket Browser Display
==========================

The ticket browser displays the tickets in the browser by calling
"rt-liber-ticketlist-browser-redraw-f" which can be changed and
customized.  Any implementation of
"rt-liber-ticketlist-browser-redraw-f" must leave point at the end of
the ticket text.

   The ticket data itself can be displayed using rt-liberation ticket
format string %-sequences:

%i
     ID number of the ticket in the RT database.
%s
     Subject line.
%c
     Ticket creation time.  The format to display the time is specified
     in the variable RT-LIBER-BROWSER-TIME-FORMAT-STRING.
%S
     Ticket status ("open", "new" etc.)
%r
     Whether the ticket is resolved.
%R
     Requestor/s
%C
     Creator of the ticket.
%o
     Owner of the ticket.
%q
     The queue originating the ticket.
%p
     The numerical priority of the ticket

   Here is an example implementation of
"rt-liber-ticketlist-browser-redraw-f" showing the use of the
%-sequences.  Note the use of text properties to add color to ticket
text.  The use of text properties as opposed to font-locking is meant to
ease customization because otherwise any change in ticket display would
break the font-locking regular expressions.

     (defun rt-liber-ticketlist-browser-redraw-f (ticket)
       "Display TICKET."
       (insert (rt-liber-format "[%c] %i" ticket))
       (add-text-properties (point-at-bol)
                            (point-at-eol)
                            '(face rt-liber-ticket-face))
       (newline)
       (insert (rt-liber-format "    [%S] %s" ticket))
       (newline)
       (insert (rt-liber-format "    %o <== %R" ticket)))

   The function "rt-liber-high-priority-p" can be used to apply a
different face or text to a ticket if it is high priority.  A ticket is
considered high priority if its value is strictly higher than
RT-LIBER-BROWSER-PRIORITY-CUTOFF


File: rt-liberation.info,  Node: Ticket Browser Sorting,  Next: Ticket Browser Filtering,  Prev: Ticket Browser Display,  Up: Ticket Browser

5.2 Ticket Browser Sorting
==========================

The tickets in the browser are displayed by default in reverse
chronological order.  Ticket sorting is done by a call to
"rt-liber-browser-default-sorting-function".

   Other sorting orders can be used by binding
"rt-liber-browser-default-sorting-function" to a different function.  To
ease writing such functions rt-liberation provides two predicate
functions to perform comparisons between ticket objects:

 -- Function: rt-liber-lex-lessthan-p a b field
     Return true if A is lexicographically less than B in FIELD.

     Here is an example of sorting tickets lexicographically by owner
     name using "rt-liber-lex-lessthan-p" (note that you can feed
     "rt-liber-lex-lessthan-p" a date/time string and it will sort it
     just fine except that it wouldn't make any sense):

          (defun rt-liber-sort-by-owner (ticket-list)
            "Sort TICKET-LIST lexicographically by owner."
            (rt-liber-sort-ticket-list
             ticket-list
             #'(lambda (a b)
                 (rt-liber-lex-lessthan-p a b "Owner"))))

 -- Function: rt-liber-time-lessthan-p a b field
     Return t if A is chronologically less than B in FIELD.

     Here is an example of sorting tickets lexicographically by owner
     name using "rt-liber-time-lessthan-p" (note that feeding
     "rt-liber-time-lessthan-p" anything but a date/time string, in this
     case "Created" contains a date, will result in an error being
     signaled).

          (defun rt-liber-sort-by-time-created (ticket-list)
            "Sort TICKET-LIST in reverse chronological order."
            (reverse
             (rt-liber-sort-ticket-list
              ticket-list
              #'(lambda (a b)
                  (rt-liber-time-lessthan-p a b "Created")))))


File: rt-liberation.info,  Node: Ticket Browser Filtering,  Next: Multiple Ticket Browsers,  Prev: Ticket Browser Sorting,  Up: Ticket Browser

5.3 Ticket Browser Filtering
============================

The Ticket Browser can also filter out (that is, not display) certain
tickets based on particular criteria.  This probably shouldn't be used
instead of a properly formed RT query, but when used in conjunction with
correctly formulated queries it becomes a powerful tool.

   During ticket display processing the Ticket Browser will call the
function pointed to by RT-LIBER-BROWSER-DEFAULT-FILTER-FUNCTION on each
ticket, passing the function the ticket alist as a single argument.  The
function is set by default to "rt-liber-default-filter-f", which is a
function which will display all tickets and filter none.

   If any tickets are filtered, the Ticket Browser will display the
filtered ticket count at the bottom ticket listing.

   Here is a simple example of how to filter out all of the tickets
which have a status of "deleted".

   First we define a custom filter function.  Note how it accepts a
single argument, which is the ticket alist, and returns nil if the
ticket is to be filtered.

     (defun rt-liber-browser-deleted-filter (ticket)
       (not
        (and ticket
             (string= (cdr (assoc "Status" ticket))
                      "deleted"))))

   Then we assign that function to be our default filtering function:

     (setq rt-liber-browser-default-filter-function
           'rt-liber-browser-deleted-filter)


File: rt-liberation.info,  Node: Multiple Ticket Browsers,  Prev: Ticket Browser Filtering,  Up: Ticket Browser

5.4 Multiple Ticket Browsers
============================

It is sometimes useful to rename the ticket browser buffer to something
more informative than the default RT-LIBER-BROWSER-BUFFER-NAME,
especially if there are multiple ticket browsers.

   Changing a ticket browser's name can be done normally with
'rename-buffer', but it is also possible to name the ticket browser when
it is created.  In the following example two ticket browser buffers will
be created displaying the query results and named "*updated by
supervisor*" and "*new tickets*" respectively:

     (defun rt-liber-daily-rounds ()
       (interactive)

       (rt-liber-browse-query
        (rt-liber-compile-query
         (and (queue "complaints")
              (owner "lem.e.tweakit")
              (status "open")
              (lastupdatedby "molly.manager")))
        "*updated by supervisor*")

       (rt-liber-browse-query
        (rt-liber-compile-query
         (and (queue "complaints")
              (owner "Nobody")
              (status "new")))
        "*new tickets*"))


File: rt-liberation.info,  Node: Ticket Viewer,  Next: Gnus Integration,  Prev: Ticket Browser,  Up: Top

6 Ticket Viewer
***************

The ticket viewer is an interface for viewing the contents of a ticket.
It provides font-locking to make reading the contents easier via
RT-LIBER-VIEWER-FONT-LOCK-KEYWORDS and a number of key-bindings.

   The ticket viewer provides key-bindings to help compose emails to
send to the RT email interface.  The key-bindings for composing email
described below are generic, what actually happens when you invoke them
depends on the email-backend system you have installed into
rt-liberation.  'rt-liberation-gnus.el' provides integration with Gnus,
*Note Gnus Integration::.

   Setting RT-LIBER-JUMP-TO-LATEST to 't' will cause the viewer to
automatically scroll to the latest comment in a ticket when that ticket
is visited.  By default RT-LIBER-JUMP-TO-LATEST is set to 'nil'.

   When in the ticket viewer buffer, invoking
"rt-liber-viewer-take-ticket" will "take" the ticket.

'q'
     Bury the ticket viewer buffer.

'n'
     Move point to the next section in ticket.

'N'
     Move point to the newest correspondence section, if any.

'p'
     Move point to the previous section in ticket.

'V'
     Visit the current ticket in a Web browser.

'm'
     Compose an answer to the current ticket.

'M'
     Compose an answer to the current ticket.  The content section
     around point will be inserted into the email body and commented
     out.

't'
     Compose a provisional answer to the current ticket.

'T'
     Compose a provisional answer to the current ticket.  The content
     section around point will be inserted into the email body and
     commented out.

'F'
     Compose an answer to the current ticket.  The content section
     around point will be inserted into the email body verbatim.

'c'
     Compose a comment for the current ticket.

'C'
     Comment on the ticket using the current context

'g'
     Refresh and redisplay the current ticket.

'SPC'
     Scroll text of ticket viewer upward.

'DEL'
     Scroll text of ticket viewer downward.

'h'
     Display the associated ticket in the ticket browser.


File: rt-liberation.info,  Node: Gnus Integration,  Next: Tracking Updates,  Prev: Ticket Viewer,  Up: Top

7 Gnus Integration
******************

The file 'rt-liberation-gnus.el' implements integration with Gnus for
composing emails.  To enable the feature, 'require' it after loading
rt-liberation:

     (require 'rt-liberation-gnus)

   In order for rt-liberation-gnus to be useful a few variables need to
be specialized.  The following is example code which sets these
variables followed by a more thorough description of the variables:

     (setq rt-liber-gnus-comment-address "our-rtserver-comment@ourserver.org"
           rt-liber-gnus-address         "our-rtserver@ourserver.org"
           rt-liber-gnus-subject-name    "ourserver.org"
           rt-liber-gnus-answer-headers  '(("Gcc" . "nnml:Send-Mail")
                                           ("X-Ethics" . "Use GNU"))
           rt-liber-gnus-signature       "Kind Regards")

 -- User Option:
     RT-LIBER-GNUS-ADDRESS is the email address which is configured in
     the RT server email interface for sending a response to the
     ticket's requestor.
 -- User Option:
     RT-LIBER-GNUS-COMMENT-ADDRESS is the email address which is
     configured in the RT server email interface for adding a comment
     under the ticket in question.
 -- User Option:
     RT-LIBER-GNUS-SUBJECT-NAME is a string, typically included at the
     beginning of the square brackets in the subject.  The string is a
     part of the subject line which helps the RT server recognize the
     email.
 -- User Option:
     RT-LIBER-GNUS-ANSWER-HEADERS defines a list of dotted-pairs
     containing the header name and value for additional email headers.
 -- User Option:
     A signature can be added automatically to the end of the email by
     setting RT-LIBER-GNUS-SIGNATURE to be some text.  It is useful to
     include newlines in this text to make the signature format nicely.

   Once rt-liberation-gnus is loaded and customized the key-bindings in
the Viewer will be able to call into it, *Note Ticket Viewer::.


File: rt-liberation.info,  Node: Tracking Updates,  Next: Batch Operations,  Prev: Gnus Integration,  Up: Top

8 Tracking Updates
******************

The functions in 'rt-liberation-update.el' help keep up with updates to
the ticket database.  To enable the feature, 'require' it after loading
rt-liberation:

     (require 'rt-liberation-update)

   Then set RT-LIBER-UPDATE-DEFAULT-QUEUE to be the name of the queue to
watch for updates.  For example:

     (setq rt-liber-update-default-queue "complaints")

 -- Function: rt-liber-update &optional no-update
     'rt-liber-update' is an interactive function which runs a query
     against the RT server asking for the tickets which have been
     updated since the time 'rt-liber-update' was last run (each time it
     runs, it leaves a time-stamp).  If no time-stamp is found, for
     instance when you run 'rt-liber-update' for the first time, today's
     date is used.

     With the NO-UPDATE prefix, 'rt-liber-update' will not update the
     time-stamp so that the next invocation will produce the same
     result.


File: rt-liberation.info,  Node: Batch Operations,  Next: Local Storage,  Prev: Tracking Updates,  Up: Top

9 Batch Operations
******************

The extension 'rt-liberation-multi.el' implements performing batch
operations on groups of tickets.  It works in two stages: First mark an
arbitrary number of tickets within the same buffer then call a batch
operation function on them.  The batch operation functions work the same
way as function which work on single tickets only that they iterate
through all of the marked tickets.

   To enable batch operations first load 'rt-liberation-multi.el':

     (require 'rt-liberation-storage)

'M'
     Mark the ticket at point for future action.  If the ticket at point
     is already marked then unmark it.

 -- Function: rt-liber-multi-set-status-open
     Set the status of all the marked tickets to "open".

 -- Function: rt-liber-multi-set-status-resolved
     Set the status of all the marked tickets to "resolved.

 -- Function: rt-liber-multi-assign name
     Assign all of the marked tickets to NAME.

 -- Function: rt-liber-multi-flag-as-spam-and-delete
     Set the status of all the marked tickets to "is-spam" and delete.


File: rt-liberation.info,  Node: Local Storage,  Next: Concept Index,  Prev: Batch Operations,  Up: Top

10 Local Storage
****************

'rt-liberation-storage.el' implements associating arbitrary ancillary
data with tickets.  The data is stored locally and is not sent to the RT
server.

   To enable local storage first load 'rt-liberation-storage.el':

     (require 'rt-liberation-storage)

   Then enable the display of ancillary data with:

     (setq rt-liber-anc-p t)

   The associated data is edited and displayed in the ticket browser
with the following command key:

'A'
     Associate text with the ticket at point.  You will be prompted to
     enter a string of text.

   Once text is associated with a ticket it will be displayed alongside
that ticket in the ticket browser.  This particular feature lends itself
to creating private annotations about tickets.

   The implementation distributed with rt-liberation allows associating
text with tickets but is not limited to text.  The same implementation
can be extended to associate any arbitrary data with any ticket.


File: rt-liberation.info,  Node: Concept Index,  Next: Function Index,  Prev: Local Storage,  Up: Top

Concept Index
*************

 [index ]
* Menu:

* Batch Operations:                      Batch Operations.      (line 6)
* dependencies:                          Dependencies.          (line 6)
* Gnus Integration:                      Gnus Integration.      (line 6)
* installation:                          Installation.          (line 6)
* introduction:                          Introduction.          (line 6)
* Local Storage:                         Local Storage.         (line 6)
* queries:                               Queries.               (line 6)
* query compiler:                        Query Compiler.        (line 6)
* query language:                        Query Language.        (line 6)
* ticket browser:                        Ticket Browser.        (line 6)
* ticket browser display function:       Ticket Browser Display.
                                                                (line 6)
* ticket browser filtering filter:       Ticket Browser Filtering.
                                                                (line 6)
* ticket browser multiple buffer:        Multiple Ticket Browsers.
                                                                (line 6)
* ticket browser sorting:                Ticket Browser Sorting.
                                                                (line 6)
* ticket viewer:                         Ticket Viewer.         (line 6)
* Tracking Updates:                      Tracking Updates.      (line 6)


File: rt-liberation.info,  Node: Function Index,  Next: Variable Index,  Prev: Concept Index,  Up: Top

Function Index
**************

 [index ]
* Menu:

* revert-buffer:                         Ticket Browser.       (line 48)
* revert-buffer <1>:                     Ticket Viewer.        (line 66)
* rt-liber-browse-query:                 Ticket Browser.       (line 12)
* rt-liber-browser-ancillary-text:       Local Storage.        (line 22)
* rt-liber-browser-assign:               Ticket Browser.       (line 62)
* rt-liber-browser-mark-as-spam:         Ticket Browser.       (line 55)
* rt-liber-browser-mode-quit:            Ticket Browser.       (line 36)
* rt-liber-browser-move:                 Ticket Browser.       (line 80)
* rt-liber-browser-open:                 Ticket Browser.       (line 68)
* rt-liber-browser-prioritize:           Ticket Browser.       (line 83)
* rt-liber-browser-refresh-and-return:   Ticket Browser.       (line 51)
* rt-liber-browser-resolve:              Ticket Browser.       (line 65)
* rt-liber-browser-take-ticket-at-point: Ticket Browser.       (line 71)
* rt-liber-display-ticket-at-point:      Ticket Browser.       (line 45)
* rt-liber-jump-to-latest-correspondence: Ticket Viewer.       (line 31)
* rt-liber-lex-lessthan-p:               Ticket Browser Sorting.
                                                               (line 15)
* rt-liber-mark-ticket-at-point:         Batch Operations.     (line 18)
* rt-liber-multi-assign:                 Batch Operations.     (line 27)
* rt-liber-multi-delete-spam:            Ticket Browser.       (line 58)
* rt-liber-multi-flag-as-spam-and-delete: Batch Operations.    (line 30)
* rt-liber-multi-set-status-open:        Batch Operations.     (line 21)
* rt-liber-multi-set-status-resolved:    Batch Operations.     (line 24)
* rt-liber-next-section-in-viewer:       Ticket Viewer.        (line 28)
* rt-liber-next-ticket-in-browser:       Ticket Browser.       (line 39)
* rt-liber-previous-section-in-viewer:   Ticket Viewer.        (line 34)
* rt-liber-previous-ticket-in-browser:   Ticket Browser.       (line 42)
* rt-liber-time-lessthan-p:              Ticket Browser Sorting.
                                                               (line 30)
* rt-liber-update:                       Tracking Updates.     (line 17)
* rt-liber-viewer-answer:                Ticket Viewer.        (line 40)
* rt-liber-viewer-answer-provisionally:  Ticket Viewer.        (line 48)
* rt-liber-viewer-answer-provisionally-this: Ticket Viewer.    (line 51)
* rt-liber-viewer-answer-this:           Ticket Viewer.        (line 43)
* rt-liber-viewer-answer-verbatim-this:  Ticket Viewer.        (line 56)
* rt-liber-viewer-comment:               Ticket Viewer.        (line 60)
* rt-liber-viewer-comment-this:          Ticket Viewer.        (line 63)
* rt-liber-viewer-mode-quit:             Ticket Viewer.        (line 25)
* rt-liber-viewer-show-ticket-browser:   Ticket Viewer.        (line 75)
* rt-liber-viewer-visit-in-browser:      Ticket Viewer.        (line 37)
* scroll-down:                           Ticket Browser.       (line 77)
* scroll-down <1>:                       Ticket Viewer.        (line 72)
* scroll-up:                             Ticket Browser.       (line 74)
* scroll-up <1>:                         Ticket Viewer.        (line 69)


File: rt-liberation.info,  Node: Variable Index,  Next: Keybinding Index,  Prev: Function Index,  Up: Top

Variable Index
**************


File: rt-liberation.info,  Node: Keybinding Index,  Prev: Variable Index,  Up: Top

Keybinding Index
****************

 [index ]
* Menu:

* a (ticket browser):                    Ticket Browser.       (line 62)
* A (ticket browser):                    Local Storage.        (line 22)
* c (ticket viewer):                     Ticket Viewer.        (line 60)
* C (ticket viewer):                     Ticket Viewer.        (line 63)
* DEL (ticket browser):                  Ticket Browser.       (line 77)
* DEL (ticket viewer):                   Ticket Viewer.        (line 72)
* F (ticket viewer):                     Ticket Viewer.        (line 56)
* g (ticket browser):                    Ticket Browser.       (line 48)
* G (ticket browser):                    Ticket Browser.       (line 51)
* g (ticket viewer):                     Ticket Viewer.        (line 66)
* h (ticket viewer):                     Ticket Viewer.        (line 75)
* m (ticket browser):                    Ticket Browser.       (line 80)
* M (ticket browser):                    Batch Operations.     (line 18)
* m (ticket viewer):                     Ticket Viewer.        (line 40)
* M (ticket viewer):                     Ticket Viewer.        (line 43)
* n (ticket browser):                    Ticket Browser.       (line 39)
* n (ticket viewer):                     Ticket Viewer.        (line 28)
* N (ticket viewer):                     Ticket Viewer.        (line 31)
* o (ticket browser):                    Ticket Browser.       (line 68)
* p (ticket browser):                    Ticket Browser.       (line 42)
* P (ticket browser):                    Ticket Browser.       (line 83)
* p (ticket viewer):                     Ticket Viewer.        (line 34)
* q (ticket browser):                    Ticket Browser.       (line 36)
* q (ticket viewer):                     Ticket Viewer.        (line 25)
* r (ticket browser):                    Ticket Browser.       (line 65)
* RET (ticket browser):                  Ticket Browser.       (line 45)
* s (ticket browser):                    Ticket Browser.       (line 55)
* S (ticket browser):                    Ticket Browser.       (line 58)
* SPC (ticket browser):                  Ticket Browser.       (line 74)
* SPC (ticket viewer):                   Ticket Viewer.        (line 69)
* t (ticket browser):                    Ticket Browser.       (line 71)
* t (ticket viewer):                     Ticket Viewer.        (line 48)
* t (ticket viewer) <1>:                 Ticket Viewer.        (line 51)
* V (ticket viewer):                     Ticket Viewer.        (line 37)



Tag Table:
Node: Top653
Node: Introduction2604
Node: Dependencies3179
Node: RT CLI Setup3718
Ref: RT CLI Setup-Footnote-15884
Node: Installation6071
Node: Queries7007
Node: Query Compiler7574
Node: Query Language8220
Node: Ticket Browser10664
Node: Ticket Browser Display13141
Node: Ticket Browser Sorting15137
Node: Ticket Browser Filtering17092
Node: Multiple Ticket Browsers18640
Node: Ticket Viewer19814
Node: Gnus Integration21991
Node: Tracking Updates24067
Node: Batch Operations25149
Node: Local Storage26334
Node: Concept Index27425
Node: Function Index29013
Node: Variable Index32368
Node: Keybinding Index32508

End Tag Table
